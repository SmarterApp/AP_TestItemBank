/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.domain;

import java.io.File;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;
import org.springframework.data.annotation.Transient;

import com.fasterxml.jackson.annotation.JsonIgnore;

public class ImportFile {

    private static final String GLOBAL_KEY = "global";

    @JsonIgnore
    @Transient
    private File file;
    private String pathName;
    private ImportStatus importStatus;
    private DateTime importCompleteTime;
    private Map<String, List<TestItemBankMessage>> messages = new LinkedHashMap<String, List<TestItemBankMessage>>();

    public String getPathName() {
        return pathName;
    }

    public void setPathName(final String path) {
        this.pathName = path;
    }

    public ImportStatus getImportStatus() {
        return importStatus;
    }

    public void setImportStatus(final ImportStatus inImportStatus) {
        this.importStatus = inImportStatus;
    }

    public DateTime getImportCompleteTime() {
        return importCompleteTime;
    }

    public void setImportCompleteTime(final DateTime inImportCompleteTime) {
        this.importCompleteTime = inImportCompleteTime;
    }

    public File getFile() {
        return file;
    }

    public void setFile(final File inFile) {
        this.file = inFile;
    }

    public void addMessage(final String messageCode) {
        addMessage(GLOBAL_KEY, messageCode, new String[]{});
    }

    public void addMessage(final String itemIdentifier, final String messageCode) {
        String modItemIdentifier = itemIdentifier == null ? GLOBAL_KEY : itemIdentifier;
        addMessage(modItemIdentifier, messageCode, new String[]{});
    }

    public void addMessage(final String itemIdentifier, final String messageCode, final String[] messageArgs) {
        String modItemIdentifier = itemIdentifier == null ? GLOBAL_KEY : itemIdentifier;
        if (!messages.containsKey(modItemIdentifier)) {
            messages.put(modItemIdentifier, new ArrayList<TestItemBankMessage>());
        }
        messages.get(modItemIdentifier).add(new TestItemBankMessage(messageCode, messageArgs));
    }

    public Map<String, List<TestItemBankMessage>> getMessages() {
        return messages;
    }
}
