/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.domain;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.opentestsystem.shared.search.domain.SearchFilter;
import org.opentestsystem.shared.search.domain.SearchFilter.Operator;
import org.opentestsystem.shared.search.domain.SearchFilter.SearchDataType;

/**
 * This is a psuedo-domain object, not really existing in the persistent store, but instead is used as part of the
 * Gateway interface for convey complex search criteria. Note: page counting in mongo is zero indexed.
 */

public class ItemSearchRequest extends AbstractSearchRequest {

    private static final long serialVersionUID = -2965186947478705076L;

    private static final String SEARCH_RESOURCE = "/item";

    private List<SearchFilter> dynamicSearchFilters;

    private static final List<SearchFilter> SEARCH_FILTERS = Arrays.asList(new SearchFilter[] {
            new SearchFilter("tenantId"),
            new SearchFilter("itemBank")
    });

    public ItemSearchRequest(final Map<String, String[]> inRequestMap, final Set<String> searchableFields) {
        super(inRequestMap, searchableFields);
    }

    public ItemSearchRequest(final Map<String, String[]> inRequestMap) {
        super(inRequestMap);
    }

    @Override
    protected void addSearchableFields(final Set<String> searchableFields) {
        dynamicSearchFilters = new ArrayList<SearchFilter>();
        if (searchableFields != null) {
            for (final String searchFilter : searchableFields) {
                dynamicSearchFilters.add(new SearchFilter(searchFilter, "allIncludedMetatdata." + searchFilter, Operator.EQ, SearchDataType.String));
            }
        }
        dynamicSearchFilters.addAll(SEARCH_FILTERS);
    }

    @Override
    public boolean isValid() {
        final String[] tenantIds = getSearchCriteria().get("tenantId");
        final String[] itembanks = getSearchCriteria().get("itemBank");
        if (tenantIds != null && itembanks != null)
          return true;
        else
          return false;
        //return tenantIds != null;
    }

    @Override
    public List<SearchFilter> getSearchFilters() {
        return dynamicSearchFilters;
    }

    @Override
    public String getSearchResource() {
        return SEARCH_RESOURCE;
    }

}
