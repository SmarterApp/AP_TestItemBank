/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import org.junit.Test;
import org.opentestsystem.authoring.testitembank.domain.Item;
import org.opentestsystem.authoring.testitembank.persistence.ItemRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.mongodb.core.MongoTemplate;

public class ItemRepositoryPageTest extends AbstractPersistenceEmbeddedTest {

    private static final Logger LOGGER = LoggerFactory.getLogger(ItemRepositoryPageTest.class);
    
    @Autowired
    private ItemRepository itemRepository;

    @Autowired
    private MongoTemplate mongoTemplate;

    @Test
    public void readsFirstPageCorrectly() {

        // create 100 documents
        for (int i = 0; i < 100; i++) {
            String version = "1.0." + i;
            String identifier = "111" + i;
            Item validItem = new Item();
            validItem.setSubject("Foo --> " + i);
            validItem.setVersion(version);
            validItem.setIdentifier(identifier);
            itemRepository.addItem(validItem);
        }

        // Request a first page of size 10 documents or items
        Page<Item> items = itemRepository.findAll(new PageRequest(0, 10));
        assertThat(items.isFirstPage(), is(true));

        // Display page content
       LOGGER.warn("");
       LOGGER.warn("============= Total number of pages ================= " + items.getTotalPages());
       LOGGER.warn("============= The curent page number is ============ " + +items.getNumber());
       LOGGER.warn("============= The curent page size is ============== " + +items.getSize());
        for (Item item : items) {
           LOGGER.warn("Identifier)" + item.getIdentifier());
           LOGGER.warn("Version)" + item.getVersion());
           LOGGER.warn("Subject)" + item.getSubject());
           LOGGER.warn("Grade)" + item.getIntendedGrade());
        }

    }

}
