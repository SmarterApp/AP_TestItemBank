/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.integration;

import java.util.List;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;

import org.apache.commons.lang.StringUtils;
import org.junit.After;
import org.junit.runner.RunWith;
import org.opentestsystem.authoring.testitembank.persistence.GridFsRepository;
import org.opentestsystem.shared.mna.client.listener.ClientSpringConfigurator;
import org.opentestsystem.shared.progman.init.InitSpringPropertyConfigLoad;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.google.common.collect.Lists;

import de.flapdoodle.embed.mongo.MongodStarter;
import de.flapdoodle.embed.mongo.config.MongodConfigBuilder;
import de.flapdoodle.embed.mongo.config.Net;
import de.flapdoodle.embed.mongo.distribution.Version;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:spring/persistence-context.xml", "classpath:spring/service-context.xml", "classpath:test-context.xml" },
        initializers = { InitSpringPropertyConfigLoad.class, ClientSpringConfigurator.class })
@ActiveProfiles({ "progman.client.impl.null", "progman.proploc.classpath", "mna.client.null" })
public abstract class AbstractPersistenceEmbeddedTest {

    private static final int MONGO_TEST_PORT = 55554;

    // setup our embedded mongo once for this jvm
    static {
        try {
            MongodStarter.getDefaultInstance().prepare(new MongodConfigBuilder()
                    .version(Version.Main.PRODUCTION)
                    .net(new Net("localhost", MONGO_TEST_PORT, false))
                    .build()).start();
        } catch (final Exception e) {
            new RuntimeException("something went wrong", e);
        }
    }

    @Autowired
    protected MongoTemplate mongoTemplate;

    @Autowired
    protected GridFsRepository gridFsRepository;

    @After
    public void dropCollections() {
        for (final String collectionName : this.mongoTemplate.getCollectionNames()) {
            if (!"system.indexes".equals(collectionName)) {
                this.mongoTemplate.remove(new Query(), collectionName);
            }
        }
    }

    protected List<ConstraintViolation<?>> getConstraintViolation(final ConstraintViolationException e, final String messageCode) {
        final List<ConstraintViolation<?>> cvs = Lists.newArrayList();
        for (final ConstraintViolation<?> cv : e.getConstraintViolations()) {
            if (StringUtils.equals(cv.getMessageTemplate(), messageCode)) {
                cvs.add(cv);
            }
        }
        return cvs;
    }
}
