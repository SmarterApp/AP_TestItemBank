/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.junit.Test;
import org.opentestsystem.authoring.testitembank.domain.ItemMetadata;
import org.opentestsystem.authoring.testitembank.domain.ItemMetadataValue;
import org.opentestsystem.authoring.testitembank.persistence.ItemMetadataRepository;
import org.opentestsystem.authoring.testitembank.persistence.ItemMetadataValueRepository;
import org.opentestsystem.authoring.testitembank.service.ItemMetadataService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;

public class ItemMetadataServiceTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private ItemMetadataService itemMetadataService;

    @Autowired
    private ItemMetadataRepository itemMetadataRepository;

    @Autowired
    private ItemMetadataValueRepository itemMetadataValueRepository;

    @Test
    public void saveNewItemMetadataToEmptyDatabaseTest() {
        assertThat(itemMetadataRepository.findAll().size(), is(0));
        assertThat(itemMetadataValueRepository.findAll().size(), is(0));

        itemMetadataService.saveNewItemMetadata("tenant-id", "field-ZZZ", "new field value");

        // validate item metadata
        assertThat(itemMetadataRepository.findAll().size(), is(1));
        final ItemMetadata foundMetadata = itemMetadataRepository.findByTenantId("tenant-id");
        assertThat(foundMetadata.getTenantId(), is("tenant-id"));
        assertThat(foundMetadata.getMetadataKeys().size(), is(1));
        assertThat(foundMetadata.getMetadataKeys().contains("field-ZZZ"), is(true));

        // validate item metadata value
        assertThat(itemMetadataValueRepository.findAll().size(), is(1));
        final ItemMetadataValue foundMetadataValue = itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field-ZZZ", "new field value");
        assertThat(foundMetadataValue.getTenantId(), is("tenant-id"));
        assertThat(foundMetadataValue.getMetadataKey(), is("field-ZZZ"));
        assertThat(foundMetadataValue.getMetadataValue(), is("new field value"));
    }

    @Test
    public void saveNewItemMetadataWithDuplicateValueTest() {
        assertThat(itemMetadataRepository.findAll().size(), is(0));
        assertThat(itemMetadataValueRepository.findAll().size(), is(0));

        // save initial
        itemMetadataService.saveNewItemMetadata("tenant-id", "field-ZZZ", "new field value");
        assertThat(itemMetadataRepository.findAll().size(), is(1));
        assertThat(itemMetadataValueRepository.findAll().size(), is(1));

        // save duplicate
        itemMetadataService.saveNewItemMetadata("tenant-id", "field-ZZZ", "new field value");

        // validate item metadata
        assertThat(itemMetadataRepository.findAll().size(), is(1));
        final ItemMetadata foundMetadata = itemMetadataRepository.findByTenantId("tenant-id");
        assertThat(foundMetadata.getTenantId(), is("tenant-id"));
        assertThat(foundMetadata.getMetadataKeys().size(), is(1));
        assertThat(foundMetadata.getMetadataKeys().contains("field-ZZZ"), is(true));

        // validate item metadata value
        assertThat(itemMetadataValueRepository.findAll().size(), is(1));
        final ItemMetadataValue foundMetadataValue = itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field-ZZZ", "new field value");
        assertThat(foundMetadataValue.getTenantId(), is("tenant-id"));
        assertThat(foundMetadataValue.getMetadataKey(), is("field-ZZZ"));
        assertThat(foundMetadataValue.getMetadataValue(), is("new field value"));
    }

    @Test
    public void saveNewItemMetadataWithSameFieldTest() {
        assertThat(itemMetadataRepository.findAll().size(), is(0));
        assertThat(itemMetadataValueRepository.findAll().size(), is(0));

        // save initial
        itemMetadataService.saveNewItemMetadata("tenant-id", "field-ZZZ", "new field value");
        assertThat(itemMetadataRepository.findAll().size(), is(1));
        assertThat(itemMetadataValueRepository.findAll().size(), is(1));

        // save new value
        itemMetadataService.saveNewItemMetadata("tenant-id", "field-ZZZ", "new field value 2");

        // validate item metadata
        assertThat(itemMetadataRepository.findAll().size(), is(1));
        final ItemMetadata foundMetadata = itemMetadataRepository.findByTenantId("tenant-id");
        assertThat(foundMetadata.getTenantId(), is("tenant-id"));
        assertThat(foundMetadata.getMetadataKeys().size(), is(1));
        assertThat(foundMetadata.getMetadataKeys().contains("field-ZZZ"), is(true));

        // validate item metadata value
        assertThat(itemMetadataValueRepository.findAll().size(), is(2));
        final ItemMetadataValue foundMetadataValue = itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field-ZZZ", "new field value");
        final ItemMetadataValue foundMetadataValue2 = itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field-ZZZ", "new field value 2");
        assertThat(foundMetadataValue, is(notNullValue()));
        assertThat(foundMetadataValue2, is(notNullValue()));
    }

    @Test
    public void saveNewItemMetadataWithDifferentFieldTest() {
        assertThat(itemMetadataRepository.findAll().size(), is(0));
        assertThat(itemMetadataValueRepository.findAll().size(), is(0));

        // save initial
        itemMetadataService.saveNewItemMetadata("tenant-id", "field-ZZZ", "new field value");
        assertThat(itemMetadataRepository.findAll().size(), is(1));
        assertThat(itemMetadataValueRepository.findAll().size(), is(1));

        // save new value
        itemMetadataService.saveNewItemMetadata("tenant-id", "field-XXX", "new field value");

        // validate item metadata
        assertThat(itemMetadataRepository.findAll().size(), is(1));
        final ItemMetadata foundMetadata = itemMetadataRepository.findByTenantId("tenant-id");
        assertThat(foundMetadata.getTenantId(), is("tenant-id"));
        assertThat(foundMetadata.getMetadataKeys().size(), is(2));
        assertThat(foundMetadata.getMetadataKeys().contains("field-ZZZ"), is(true));
        assertThat(foundMetadata.getMetadataKeys().contains("field-XXX"), is(true));

        // validate item metadata value
        assertThat(itemMetadataValueRepository.findAll().size(), is(2));
        final ItemMetadataValue foundMetadataValue = itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field-ZZZ", "new field value");
        final ItemMetadataValue foundMetadataValue2 = itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field-XXX", "new field value");
        assertThat(foundMetadataValue, is(notNullValue()));
        assertThat(foundMetadataValue2, is(notNullValue()));
    }

    @Test
    public void saveNewItemMetadataWithDifferentTenantTest() {
        assertThat(itemMetadataRepository.findAll().size(), is(0));
        assertThat(itemMetadataValueRepository.findAll().size(), is(0));

        // save initial
        itemMetadataService.saveNewItemMetadata("tenant-id", "field-ZZZ", "new field value");
        assertThat(itemMetadataRepository.findAll().size(), is(1));
        assertThat(itemMetadataValueRepository.findAll().size(), is(1));

        // save new value
        itemMetadataService.saveNewItemMetadata("tenant-id-2", "field-ZZZ", "new field value");

        // validate item metadata
        assertThat(itemMetadataRepository.findAll().size(), is(2));
        final ItemMetadata foundMetadata = itemMetadataRepository.findByTenantId("tenant-id");
        assertThat(foundMetadata.getMetadataKeys().size(), is(1));
        final ItemMetadata foundMetadata2 = itemMetadataRepository.findByTenantId("tenant-id-2");
        assertThat(foundMetadata2.getMetadataKeys().size(), is(1));

        // validate item metadata value
        assertThat(itemMetadataValueRepository.findAll().size(), is(2));
        final ItemMetadataValue foundMetadataValue = itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field-ZZZ", "new field value");
        final ItemMetadataValue foundMetadataValue2 = itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id-2", "field-ZZZ", "new field value");
        assertThat(foundMetadataValue, is(notNullValue()));
        assertThat(foundMetadataValue2, is(notNullValue()));
    }

    @Test
    public void saveNewItemMetadataWithMapTest() {
        assertThat(itemMetadataRepository.findAll().size(), is(0));
        assertThat(itemMetadataValueRepository.findAll().size(), is(0));

        // save map value
        itemMetadataService.saveNewItemMetadata("tenant-id", "field", ImmutableMap.of("key1", "value1", "key2", "value2"));

        // validate item metadata
        assertThat(itemMetadataRepository.findAll().size(), is(1));
        final ItemMetadata foundMetadata = itemMetadataRepository.findByTenantId("tenant-id");
        assertThat(foundMetadata.getMetadataKeys().size(), is(2));
        assertThat(foundMetadata.getMetadataKeys().contains("field.key1"), is(true));
        assertThat(foundMetadata.getMetadataKeys().contains("field.key2"), is(true));

        // validate item metadata value
        assertThat(itemMetadataValueRepository.findAll().size(), is(2));
        final ItemMetadataValue foundMetadataValue = itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field.key1", "value1");
        final ItemMetadataValue foundMetadataValue2 = itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field.key2", "value2");
        assertThat(foundMetadataValue, is(notNullValue()));
        assertThat(foundMetadataValue2, is(notNullValue()));
    }

    @Test
    public void saveNewItemMetadataWithNestedMapTest() {
        assertThat(itemMetadataRepository.findAll().size(), is(0));
        assertThat(itemMetadataValueRepository.findAll().size(), is(0));

        // save map value
        itemMetadataService.saveNewItemMetadata("tenant-id", "field", ImmutableMap.of("key1", "value1", "key2", ImmutableMap.of("keyA", "valueA", "keyB", "valueB")));

        // validate item metadata
        assertThat(itemMetadataRepository.findAll().size(), is(1));
        final ItemMetadata foundMetadata = itemMetadataRepository.findByTenantId("tenant-id");
        assertThat(foundMetadata.getMetadataKeys().size(), is(3));
        assertThat(foundMetadata.getMetadataKeys().contains("field.key1"), is(true));
        assertThat(foundMetadata.getMetadataKeys().contains("field.key2.keyA"), is(true));
        assertThat(foundMetadata.getMetadataKeys().contains("field.key2.keyB"), is(true));

        // validate item metadata value
        assertThat(itemMetadataValueRepository.findAll().size(), is(3));
        final ItemMetadataValue foundMetadataValue = itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field.key1", "value1");
        final ItemMetadataValue foundMetadataValue2 = itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field.key2.keyA", "valueA");
        final ItemMetadataValue foundMetadataValue3 = itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field.key2.keyB", "valueB");
        assertThat(foundMetadataValue, is(notNullValue()));
        assertThat(foundMetadataValue2, is(notNullValue()));
        assertThat(foundMetadataValue3, is(notNullValue()));
    }

    @Test
    public void saveNewItemMetadataWithListOfNestedMapTest() {
        assertThat(itemMetadataRepository.findAll().size(), is(0));
        assertThat(itemMetadataValueRepository.findAll().size(), is(0));

        // save map value
        itemMetadataService.saveNewItemMetadata(
                "tenant-id",
                "field",
                ImmutableMap.of(
                        "key1",
                        "value1",
                        "StandardPublication",
                        ImmutableList.of(
                                ImmutableMap.of("Publication", "CC-ELA-v1", "PrimaryStandard", "CC-ELA-v1|key1", "SecondaryStandard", "CC-ELA-v1|key1:a"),
                                ImmutableMap.of("Publication", "CC-ELA-v2", "PrimaryStandard", "CC-ELA-v2|key1", "SecondaryStandard", "CC-ELA-v2|key1:a")
                                )));

        // validate item metadata
        assertThat(itemMetadataRepository.findAll().size(), is(1));
        final ItemMetadata foundMetadata = itemMetadataRepository.findByTenantId("tenant-id");
        assertThat(foundMetadata.getMetadataKeys().size(), is(4));
        assertThat(foundMetadata.getMetadataKeys().contains("field.key1"), is(true));
        assertThat(foundMetadata.getMetadataKeys().contains("field.StandardPublication.Publication"), is(true));
        assertThat(foundMetadata.getMetadataKeys().contains("field.StandardPublication.PrimaryStandard"), is(true));
        assertThat(foundMetadata.getMetadataKeys().contains("field.StandardPublication.SecondaryStandard"), is(true));

        // validate item metadata value
        assertThat(itemMetadataValueRepository.findAll().size(), is(7));
        assertThat(itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field.key1", "value1"), is(notNullValue()));
        assertThat(itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field.StandardPublication.Publication", "CC-ELA-v1"), is(notNullValue()));
        assertThat(itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field.StandardPublication.Publication", "CC-ELA-v2"), is(notNullValue()));
        assertThat(itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field.StandardPublication.PrimaryStandard", "CC-ELA-v1|key1"), is(notNullValue()));
        assertThat(itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field.StandardPublication.PrimaryStandard", "CC-ELA-v2|key1"), is(notNullValue()));
        assertThat(itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field.StandardPublication.SecondaryStandard", "CC-ELA-v1|key1:a"), is(notNullValue()));
        assertThat(itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field.StandardPublication.SecondaryStandard", "CC-ELA-v2|key1:a"), is(notNullValue()));
    }

    @Test
    public void saveNewItemMetadataWithNestedMapWithBlanksTest() {
        assertThat(itemMetadataRepository.findAll().size(), is(0));
        assertThat(itemMetadataValueRepository.findAll().size(), is(0));

        // save map value
        itemMetadataService.saveNewItemMetadata("tenant-id", "field", ImmutableMap.of("key1", "value1", "key2", ImmutableMap.of("keyA", "", "keyB", "valueB")));

        // validate item metadata
        assertThat(itemMetadataRepository.findAll().size(), is(1));
        final ItemMetadata foundMetadata = itemMetadataRepository.findByTenantId("tenant-id");
        assertThat(foundMetadata.getMetadataKeys().size(), is(2));
        assertThat(foundMetadata.getMetadataKeys().contains("field.key1"), is(true));
        assertThat(foundMetadata.getMetadataKeys().contains("field.key2.keyB"), is(true));

        // validate item metadata value
        assertThat(itemMetadataValueRepository.findAll().size(), is(2));
        final ItemMetadataValue foundMetadataValue = itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field.key1", "value1");
        final ItemMetadataValue foundMetadataValue2 = itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field.key2.keyB", "valueB");
        assertThat(foundMetadataValue, is(notNullValue()));
        assertThat(foundMetadataValue2, is(notNullValue()));
    }

    @Test
    public void saveNewItemMetadataWithDuplicateNestedMapWithBlanksTest() {
        assertThat(itemMetadataRepository.findAll().size(), is(0));
        assertThat(itemMetadataValueRepository.findAll().size(), is(0));

        // save map value
        itemMetadataService.saveNewItemMetadata("tenant-id", "field", ImmutableMap.of("key1", "value1", "key2", ImmutableMap.of("keyA", "", "keyB", "valueB")));

        // save map value
        itemMetadataService.saveNewItemMetadata("tenant-id", "field", ImmutableMap.of("key1", "value1", "key2", ImmutableMap.of("keyA", "xxx", "keyB", "yyy")));

        // validate item metadata
        assertThat(itemMetadataRepository.findAll().size(), is(1));
        final ItemMetadata foundMetadata = itemMetadataRepository.findByTenantId("tenant-id");
        assertThat(foundMetadata.getMetadataKeys().size(), is(3));
        assertThat(foundMetadata.getMetadataKeys().contains("field.key1"), is(true));
        assertThat(foundMetadata.getMetadataKeys().contains("field.key2.keyA"), is(true));
        assertThat(foundMetadata.getMetadataKeys().contains("field.key2.keyB"), is(true));

        // validate item metadata value
        assertThat(itemMetadataValueRepository.findAll().size(), is(4));
        final ItemMetadataValue foundMetadataValue = itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field.key1", "value1");
        final ItemMetadataValue foundMetadataValue2 = itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field.key2.keyA", "xxx");
        final ItemMetadataValue foundMetadataValue3 = itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field.key2.keyB", "yyy");
        final ItemMetadataValue foundMetadataValue4 = itemMetadataValueRepository.findByTenantIdAndMetadataKeyAndMetadataValue("tenant-id", "field.key2.keyB", "valueB");
        assertThat(foundMetadataValue, is(notNullValue()));
        assertThat(foundMetadataValue2, is(notNullValue()));
        assertThat(foundMetadataValue3, is(notNullValue()));
        assertThat(foundMetadataValue4, is(notNullValue()));
    }

    @Test
    public void searchMetadataValuesTest() {
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value 2");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value 3");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value 4");

        final SearchResponse<ItemMetadataValue> results = itemMetadataService.searchItemMetadataValues(buildMetadataSearchRequest("tenant-id", "field1", "new field value 2", "0", "10", null,
                null));

        assertThat(results.getReturnCount(), is(1));
        assertThat(results.getSearchResults().get(0).getMetadataValue(), is("new field value 2"));
    }

    @Test
    public void findMetadataValuesStartsWIthValueTest() {
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value 2");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value 3");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value 4");

        final SearchResponse<ItemMetadataValue> results = itemMetadataService.searchItemMetadataValues(buildMetadataSearchRequest("tenant-id", "field1", "new", "0", "10", null, null));

        assertThat(results.getReturnCount(), is(4));
        assertThat(results.getSearchResults().get(0).getMetadataValue(), is("new field value"));
        assertThat(results.getSearchResults().get(1).getMetadataValue(), is("new field value 2"));
        assertThat(results.getSearchResults().get(2).getMetadataValue(), is("new field value 3"));
        assertThat(results.getSearchResults().get(3).getMetadataValue(), is("new field value 4"));
    }

    @Test
    public void findMetadataValuesByEndsWithValueTest() {
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value 2");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value 3");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value 4");

        final SearchResponse<ItemMetadataValue> results = itemMetadataService.searchItemMetadataValues(buildMetadataSearchRequest("tenant-id", "field1", "value", "0", "10", null, null));

        assertThat(results.getReturnCount(), is(4));
        assertThat(results.getSearchResults().get(0).getMetadataValue(), is("new field value"));
        assertThat(results.getSearchResults().get(1).getMetadataValue(), is("new field value 2"));
        assertThat(results.getSearchResults().get(2).getMetadataValue(), is("new field value 3"));
        assertThat(results.getSearchResults().get(3).getMetadataValue(), is("new field value 4"));
    }

    @Test
    public void findMetadataValuesWithDifferentMetadataValueTest() {
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value");
        itemMetadataService.saveNewItemMetadata("tenant-id2", "field1", "new field value 2");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field2", "new field value 3");
        itemMetadataService.saveNewItemMetadata("tenant-id2", "field2", "new field value 4");

        final SearchResponse<ItemMetadataValue> results = itemMetadataService.searchItemMetadataValues(buildMetadataSearchRequest("tenant-id2", "field1", "value 2", "0", "10", null, null));

        assertThat(results.getReturnCount(), is(1));
        assertThat(results.getSearchResults().get(0).getMetadataValue(), is("new field value 2"));
    }

    @Test
    public void findMetadataValuesOnThirdPage() {
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value 2");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value 3");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value 4");

        final SearchResponse<ItemMetadataValue> results = itemMetadataService
                .searchItemMetadataValues(buildMetadataSearchRequest("tenant-id", "field1", "new field value", "2", "1", null, null));

        assertThat(results.getReturnCount(), is(1));
        assertThat(results.getSearchResults().get(0).getMetadataValue(), is("new field value 3"));
    }

    @Test
    public void findMetadataValuesOnThirdPageReverseSort() {
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value 2");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value 3");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "new field value 4");

        final SearchResponse<ItemMetadataValue> results = itemMetadataService
                .searchItemMetadataValues(buildMetadataSearchRequest("tenant-id", "field1", "new field value", "2", "1", "metadataValue", "desc"));

        assertThat(results.getReturnCount(), is(1));
        assertThat(results.getSearchResults().get(0).getMetadataValue(), is("new field value 2"));
    }

    private static Map<String, String[]> buildMetadataSearchRequest(final String tenantId, final String metadataKey, final String metadataValue,
            final String currentPage, final String pageSize, final String sortKey, final String sortDir) {
        final Map<String, String[]> paramMap = Maps.newHashMap();

        if (StringUtils.isNotBlank(tenantId)) {
            paramMap.put("tenantId", paramArray(tenantId));
        }
        if (StringUtils.isNotBlank(metadataKey)) {
            paramMap.put("metadataKey", paramArray(metadataKey));
        }
        if (StringUtils.isNotBlank(metadataValue)) {
            paramMap.put("metadataValue", paramArray(metadataValue));
        }

        if (StringUtils.isNotBlank(pageSize)) {
            paramMap.put("pageSize", paramArray(pageSize));
        }
        if (StringUtils.isNotBlank(currentPage)) {
            paramMap.put("currentPage", paramArray(currentPage));
        }
        if (StringUtils.isNotBlank(sortKey)) {
            paramMap.put("sortKey", paramArray(sortKey));
        }
        if (StringUtils.isNotBlank(sortDir)) {
            paramMap.put("sortDir", paramArray(sortDir));
        }

        return paramMap;
    }

    private static String[] paramArray(final String... param) {
        return param;
    }
}
