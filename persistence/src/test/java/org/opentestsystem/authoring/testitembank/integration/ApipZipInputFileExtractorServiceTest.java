/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.integration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.junit.Test;
import org.opentestsystem.authoring.testitembank.apipzip.domain.ApipItemContent;
import org.opentestsystem.authoring.testitembank.apipzip.domain.ApipItemMetadata;
import org.opentestsystem.authoring.testitembank.apipzip.domain.ApipManifest;
import org.opentestsystem.authoring.testitembank.apipzip.domain.ApipManifestDependency;
import org.opentestsystem.authoring.testitembank.apipzip.domain.ApipManifestResource;
import org.opentestsystem.authoring.testitembank.apipzip.domain.ApipZipFileContent;
import org.opentestsystem.authoring.testitembank.service.ZipInputFileExtractorService;
import org.opentestsystem.shared.exception.RestException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.w3c.dom.Document;

public class ApipZipInputFileExtractorServiceTest extends AbstractPersistenceEmbeddedTest {

    private static final Logger LOGGER = LoggerFactory.getLogger(ApipZipInputFileExtractorServiceTest.class);

    @Value("classpath:tenant_123/single_valid_item.zip")
    private File testFile;

    //@Value("classpath:tenant_123_old/SQA_2012_12_11_G9C1CR_B.zip")
    @Value("classpath:tenant_123/multiple_valid_items.zip")
    private File multiItemFile;

    @Autowired
    private ZipInputFileExtractorService apipZipInputFileExtractorService;

    @Test
    public void testImportingZippedApipFile() {
        final ApipZipFileContent extractedData = apipZipInputFileExtractorService.extractData(testFile);
        extractedData.getManifest().getResources();
        assertEquals("wrong number of resources", 4, extractedData.getManifest().getResources().size());

        assertEquals("first resource is the apip item", "item-187-174", extractedData.getManifest().getResources().get(0).getIdentifier());

        final Map<String, ApipItemMetadata> meta = extractedData.getItemMetadata();
        final ApipItemMetadata m2 = meta.get("item-187-174");

        final Map<String, Object> metadataMap = m2.getMetadata();
        assertEquals("not the correct metadata", "4", metadataMap.get("Version").toString());
        assertEquals("not the correct metadata", "ER", metadataMap.get("InteractionType").toString());
        assertEquals("not the correct metadata", "10", metadataMap.get("IntendedGrade").toString());
        assertEquals("not the correct metadata", "MATH", metadataMap.get("Subject").toString());
        assertEquals("not the correct metadata", "2", metadataMap.get("DepthOfKnowledge").toString());
        assertEquals("not the correct metadata", "Medium", metadataMap.get("EducationalDifficulty").toString());

    }

    @Test
    public void testImportingZippedApipFile2() {
        final ApipZipFileContent extractedData = apipZipInputFileExtractorService.extractData(multiItemFile);
        extractedData.getManifest().getResources();
        assertEquals("wrong number of resources in original zip manifest", 19, extractedData.getManifest().getResources().size());

        assertEquals("first resource is the apip item", "item-187-174", extractedData.getManifest().getResources().get(0).getIdentifier());

        final ApipItemContent itemContent = extractedData.getItemContentMap().get("item-187-174");
        final ApipManifest man = getApipManifest(itemContent.getItemZip());
        assertNotNull(man);
        assertEquals("wrong number of resources in item zip manifest", 4, man.getResources().size());
        
        final HashMap<String, ApipManifestResource> resources = new HashMap<String, ApipManifestResource>();
        for (final ApipManifestResource res : man.getResources()) {
            resources.put(res.getIdentifier(), res);
        }

        assertNotNull("expected resource not in manifest", resources.get("item-187-174"));
        assertNotNull("expected resource not in manifest", resources.get("item-187-174_metadata"));
        assertNotNull("expected resource not in manifest", resources.get("Item_174_ASL_STEM_mp4"));
        assertNotNull("expected resource not in manifest", resources.get("item_174_enu_nemeth_brf"));
        assertNull("unexpected resource found in manfiest", resources.get("asd"));
        
        
        
        final ApipItemContent itemContent2 = extractedData.getItemContentMap().get("item-187-650");
        final ApipManifest man2 = getApipManifest(itemContent2.getItemZip());
        assertNotNull(man2);
        assertEquals("wrong number of resources in item zip manifest", 15, man2.getResources().size());

    }

    private ApipManifest getApipManifest(final byte[] bytes) {
        ApipManifest returnValue = null;
        try {
            final ByteArrayInputStream in = new ByteArrayInputStream(bytes);
            final ZipInputStream zip = new ZipInputStream(in);

            ZipEntry entry;
            Document d = null;
            while ((entry = zip.getNextEntry()) != null) {
                LOGGER.error("entry: " + entry.getName() + ", " + entry.getSize());
                if (entry.getName().endsWith("imsmanifest.xml")) {
                    final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                    final DocumentBuilder builder = factory.newDocumentBuilder();
                    d = builder.parse(zip);
                    break;
                }
            }

            final JAXBContext jaxbContext = JAXBContext.newInstance(new Class[] { ApipManifest.class, ApipManifestResource.class, ApipManifestDependency.class, ApipItemMetadata.class });
            final Unmarshaller um = jaxbContext.createUnmarshaller();
            final JAXBElement<ApipManifest> myJAXBObject = um.unmarshal(d, ApipManifest.class);
            returnValue = myJAXBObject.getValue();

        } catch (final Exception e) {
            e.printStackTrace();
            throw new RestException("error parsing zip in unit test....", e);
        }
        return returnValue;
    }

}
