/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.integration;

import static org.junit.Assert.assertEquals;
import static org.springframework.data.mongodb.core.query.Criteria.where;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testitembank.domain.Item;
import org.opentestsystem.authoring.testitembank.persistence.ItemRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;

public class ItemSearchTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private ItemRepository itemRepository;
    
    @Autowired
    private MongoOperations mongoOperations;
    
    @Before
    public void buildItems() {
        Item i = new Item();
        i.setIdentifier("abc1");
        i.setTenantId("001");
        
        HashMap<String, Object> metadata = new HashMap<String, Object>();
        List<Object> metadata1 = Arrays.asList(new Object[] {"snickers","milky way"});
        metadata.put("candy", metadata1);
        List<Object> metadata2 = Arrays.asList(new Object[] {"packers","badgers"});
        metadata.put("teams", metadata2);
        
        HashMap<String, Object> movie1 = new HashMap<String, Object>();
        movie1.put("title", "Spaceballs");
        movie1.put("genre", "Comedy");
        
        HashMap<String, Object> movie2 = new HashMap<String, Object>();
        movie2.put("title", "Saving Private Ryan");
        movie2.put("genre", "War");
        
        List<Object> movieList = Arrays.asList(new Object[] {movie1, movie2});
        metadata.put("movies", movieList);
        
        i.setAllIncludedMetatdata(metadata);
        
        itemRepository.save(i);
        
        
        
        i = new Item();
        i.setIdentifier("abc2");
        i.setTenantId("001");
        
        metadata = new HashMap<String, Object>();
        metadata.put("candy", "skittles");
        metadata2 = Arrays.asList(new Object[] {"packers"});
        metadata.put("teams", metadata2);
        
        movie1 = new HashMap<String, Object>();
        movie1.put("title", "Superbad");
        movie1.put("genre", "Comedy");
        
        movie2 = new HashMap<String, Object>();
        movie2.put("title", "Caddyshack");
        movie2.put("genre", Arrays.asList(new String[] {"Sports","Comedy"}));
        
        movieList = Arrays.asList(new Object[] {movie1, movie2});
        metadata.put("movies", movieList);
        
        i.setAllIncludedMetatdata(metadata);
        
        itemRepository.save(i);
        
    }
    
    @Test
    public void testSimpleSearch1(){
        Criteria c = where("allIncludedMetatdata.candy").is("skittles");
        List<Item> results = mongoOperations.find(new Query(c), Item.class);
        assertEquals("wrong number of results", 1, results.size());
        assertEquals("wrong object found", "abc2", results.get(0).getIdentifier());
    }
    
    @Test
    public void testSimpleSearch2(){
        Criteria c = where("allIncludedMetatdata.candy").is("snickers");
        List<Item> results = mongoOperations.find(new Query(c), Item.class);
        assertEquals("wrong number of results", 1, results.size());
        assertEquals("wrong object found", "abc1", results.get(0).getIdentifier());
    }

    @Test
    public void testSimpleSearch3(){
        Criteria c = where("allIncludedMetatdata.movies.title").is("Caddyshack");
        List<Item> results = mongoOperations.find(new Query(c), Item.class);
        assertEquals("wrong number of results", 1, results.size());
        assertEquals("wrong object found", "abc2", results.get(0).getIdentifier());
    }
    
    @Test
    public void testSimpleSearch4(){
        Criteria c = where("allIncludedMetatdata.movies.title").is("Nothing");
        List<Item> results = mongoOperations.find(new Query(c), Item.class);
        assertEquals("wrong number of results", 0, results.size());
    }
    
    @Test
    public void testSearchAgainstSingleObjectAndArrayValue(){
        Criteria c = where("allIncludedMetatdata.movies.genre").is("Sports");
        List<Item> results = mongoOperations.find(new Query(c), Item.class);
        assertEquals("wrong number of results", 1, results.size());
        assertEquals("wrong object found", "abc2", results.get(0).getIdentifier());
        
        
        c = where("allIncludedMetatdata.movies.genre").is("Comedy");
        results = mongoOperations.find(new Query(c), Item.class);
        assertEquals("wrong number of results", 2, results.size());
        assertEquals("wrong object found", "abc1", results.get(0).getIdentifier());
        assertEquals("wrong object found", "abc2", results.get(1).getIdentifier());
    }
    
}
