/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import org.joda.time.DateTime;
import org.junit.Test;
import org.mockito.Mockito;
import org.opentestsystem.authoring.testitembank.domain.ImportFile;
import org.opentestsystem.authoring.testitembank.domain.ImportSet;
import org.opentestsystem.authoring.testitembank.domain.ImportStatus;
import org.opentestsystem.authoring.testitembank.domain.ImportType;
import org.opentestsystem.authoring.testitembank.domain.Item;
import org.opentestsystem.authoring.testitembank.domain.ItemHistory;
import org.opentestsystem.authoring.testitembank.domain.TestItemBankMessage;
import org.opentestsystem.authoring.testitembank.exception.TestItemBankException;
import org.opentestsystem.authoring.testitembank.service.FileTransferService;
import org.opentestsystem.authoring.testitembank.service.ImportSetService;
import org.opentestsystem.authoring.testitembank.service.ItemService;
import org.opentestsystem.shared.exception.RestException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;

import com.mongodb.gridfs.GridFSDBFile;

public class ImportFileTest extends AbstractPersistenceEmbeddedTest {

    @Value("classpath:tenant_123/single_valid_item.zip")
    private File testFile;

    private static final int EXPECTED_ITEMS_IN_ZIP = 1;

    @Value("classpath:tenant_123/single_item_missing_required_metadata.zip")
    private File missingDataTestFile;

    @Value("classpath:tenant_123/single_item_missing_metadata_file.zip")
    private File missingMetadataFile;

    @Value("classpath:tenant_123/single_item_missing_resource.zip")
    private File missingResourceTestFile;

    @Value("classpath:tenant_123/multiple_valid_items.zip")
    private File multiItemTestFile;

    @Value("classpath:tenant_123/not_a_zip.zip")
    private File badZipFile;

    @Value("classpath:tenant_123/missing_manifest.zip")
    private File missingManifestFile;

    @Autowired
    private ImportSetService importSetServiceImpl;

    @Autowired
    private ItemService itemService;

    @Autowired
    private FileTransferService sftpFileTransferServiceImpl;

    @Autowired
    private MongoTemplate mongoTemplate;

    @Test
    public void importTestFile() {
        final ImportFile importFile = new ImportFile();
        importFile.setFile(this.testFile);

        final ImportSet importSet = new ImportSet();
        importSet.setTenantId("tenantId");
        importSet.setImportStatus(ImportStatus.UNIMPORTED);
        importSet.setImportType(ImportType.MULTIPART_REQUEST);
        importSet.addFileToImport(this.testFile);

        this.importSetServiceImpl.importFileSet(importSet);

        final List<Item> lst = this.mongoTemplate.findAll(Item.class);
        assertEquals("should be the one item", EXPECTED_ITEMS_IN_ZIP, lst.size());
        assertThat(lst.get(0).getTenantId(), is(equalTo("tenantId")));
        assertEquals("brittle test", "MATH", lst.get(0).getSubject());
    }

    @Test
    public void importSftpFiles() {
        assertNull(this.sftpFileTransferServiceImpl.getFile("import-set-id", "some.zip"));
        assertNotNull(this.sftpFileTransferServiceImpl.getFile("import-set-id", "/tenant_123/" + this.testFile.getName()));
    }

    @Test
    public void validSftpImportSet() {
        ImportSet importSet = getTestImportSet(ImportType.SFTP, this.testFile.getName());

        assertNull(importSet.getImportCompleteTime());
        this.importSetServiceImpl.importFileSet(importSet);

        importSet = this.importSetServiceImpl.getImportSet(importSet.getId());
        assertImportSetIsCompleted(importSet);
        assertEquals("should be one import file", 1, importSet.getImportFiles().size());
        assertEquals("import file wrong path name", this.testFile.getName(), importSet.getImportFiles().get(0).getPathName());
        assertEquals("import file should have success message", "item.successfully.added", getAllMessageCodes(importSet.getImportFiles().get(0).getMessages()).get(0));

        assertEquals("should be an item", EXPECTED_ITEMS_IN_ZIP, this.mongoTemplate.findAll(Item.class).size());
        assertEquals("should be an importset", 1, this.mongoTemplate.findAll(ImportSet.class).size());

        final Item inserted = this.mongoTemplate.findOne(Query.query(Criteria.where("identifier").is("item-187-174")), Item.class);
        assertEquals("one item zip should return the original zip.", inserted.getOriginalZipGridId(), inserted.getItemZipGridId());
    }

    @Test
    public void sftpImportSetFileNotFound() {
        ImportSet importSet = getTestImportSet(ImportType.SFTP, "something_not_out_there.zip");

        assertNull(importSet.getImportCompleteTime());
        this.importSetServiceImpl.importFileSet(importSet);

        importSet = this.importSetServiceImpl.getImportSet(importSet.getId());

        assertEquals("should be one import file", 1, importSet.getImportFiles().size());
        assertEquals("import file wrong path name", "something_not_out_there.zip", importSet.getImportFiles().get(0).getPathName());
        assertEquals("import file wrong status", ImportStatus.FILE_NOT_FOUND, importSet.getImportFiles().get(0).getImportStatus());
        assertEquals("should have file not found message", "file.not.found", getAllMessageCodes(importSet.getImportFiles().get(0).getMessages()).get(0));

        assertEquals("should be no items imported", 0, this.mongoTemplate.findAll(Item.class).size());
        assertEquals("should be an importset", 1, this.mongoTemplate.findAll(ImportSet.class).size());
    }

    @Test
    public void validStagedImport() {
        ImportSet importSet = getTestImportSet(ImportType.STAGED_FILE, this.testFile.getAbsolutePath());

        assertNull(importSet.getImportCompleteTime());
        this.importSetServiceImpl.importFileSet(importSet);

        importSet = this.importSetServiceImpl.getImportSet(importSet.getId());
        assertImportSetIsCompleted(importSet);
        assertEquals("should be one import file", 1, importSet.getImportFiles().size());
        assertEquals("import file wrong path name", this.testFile.getAbsolutePath(), importSet.getImportFiles().get(0).getPathName());

        assertEquals("should be an item", EXPECTED_ITEMS_IN_ZIP, this.mongoTemplate.findAll(Item.class).size());
        assertEquals("should be an importset", 1, this.mongoTemplate.findAll(ImportSet.class).size());
    }

    @Test
    public void stagedImportFileNotFound() {
        final String noFilePath = this.testFile.getParentFile().getAbsolutePath() + "/noFile.zip";
        ImportSet importSet = getTestImportSet(ImportType.STAGED_FILE, noFilePath);

        assertNull(importSet.getImportCompleteTime());
        this.importSetServiceImpl.importFileSet(importSet);

        importSet = this.importSetServiceImpl.getImportSet(importSet.getId());

        assertEquals("should be one import file", 1, importSet.getImportFiles().size());
        assertEquals("import file wrong path name", noFilePath, importSet.getImportFiles().get(0).getPathName());
        assertEquals("import file wrong status", ImportStatus.FILE_NOT_FOUND, importSet.getImportFiles().get(0).getImportStatus());
        assertEquals("should have file not found message", "file.not.found", getAllMessageCodes(importSet.getImportFiles().get(0).getMessages()).get(0));

        assertEquals("should be no items imported", 0, this.mongoTemplate.findAll(Item.class).size());
        assertEquals("should be an importset", 1, this.mongoTemplate.findAll(ImportSet.class).size());
    }

    private void assertImportSetIsCompleted(final ImportSet importSet) {
        assertNotNull(importSet.getImportCompleteTime());
        assertEquals("import set status not complete", ImportStatus.IMPORT_COMPLETE, importSet.getImportStatus());
        for (final ImportFile importFile : importSet.getImportFiles()) {
            assertNotNull("import complete time should be set", importFile.getImportCompleteTime());
            assertEquals("import status should be complete", ImportStatus.IMPORT_COMPLETE, importFile.getImportStatus());
        }
    }

    private ImportSet getTestImportSet(final ImportType importType, final String pathName) {
        final ImportSet importSet = new ImportSet();
        importSet.setTenantId("123");
        importSet.setImportStatus(ImportStatus.UNIMPORTED);
        importSet.setImportType(importType);
        importSet.setRequestTime(new DateTime());
        importSet.addFilePathToImport(pathName);
        assertNull("id not set yet", importSet.getId());
        this.importSetServiceImpl.saveImportSet(importSet);
        assertNotNull("should have created id on insert", importSet.getId());
        return importSet;
    }

    @Test
    public void invalidData() {
        ImportSet importSet = getTestImportSet(ImportType.STAGED_FILE, this.missingDataTestFile.getAbsolutePath());

        assertNull(importSet.getImportCompleteTime());
        this.importSetServiceImpl.importFileSet(importSet);

        importSet = this.importSetServiceImpl.getImportSet(importSet.getId());
        final ImportFile firstFile = importSet.getImportFiles().get(0);
        assertEquals("falied status code expected", ImportStatus.FAILED, firstFile.getImportStatus());
        final List<String> allCodes = getAllMessageCodes(firstFile.getMessages());
        assertTrue("expected error code", allCodes.contains("item.emptyField.interactionType"));
        assertTrue("expected error code", allCodes.contains("item.emptyField.version"));
        assertTrue("expected error code", allCodes.contains("item.emptyField.subject"));

        assertEquals("should be an item", 0, this.mongoTemplate.findAll(Item.class).size());
        assertEquals("should be an importset", 1, this.mongoTemplate.findAll(ImportSet.class).size());
    }

    @Test
    public void missingMetadataFile() {
        ImportSet importSet = getTestImportSet(ImportType.STAGED_FILE, this.missingMetadataFile.getAbsolutePath());

        assertNull(importSet.getImportCompleteTime());
        this.importSetServiceImpl.importFileSet(importSet);

        importSet = this.importSetServiceImpl.getImportSet(importSet.getId());
        final ImportFile firstFile = importSet.getImportFiles().get(0);
        assertEquals("falied status code expected", ImportStatus.FAILED, firstFile.getImportStatus());
        final List<String> allCodes = getAllMessageCodes(firstFile.getMessages());
        assertTrue("expected error code", allCodes.contains("item.invalid.zip.missingMetadata"));

        assertEquals("should be an item", 0, this.mongoTemplate.findAll(Item.class).size());
        assertEquals("should be an importset", 1, this.mongoTemplate.findAll(ImportSet.class).size());
    }

    @Test
    public void importMultipleItemsInOneFile() {
        final ImportSet importSet = getTestImportSet(ImportType.STAGED_FILE, this.multiItemTestFile.getAbsolutePath());

        assertNull(importSet.getImportCompleteTime());
        this.importSetServiceImpl.importFileSet(importSet);

        assertImportSetIsCompleted(importSet);
        assertEquals("should be one import file", 1, importSet.getImportFiles().size());
        assertEquals("import file wrong path name", this.multiItemTestFile.getAbsolutePath(), importSet.getImportFiles().get(0).getPathName());

        final Collection<Item> items = this.mongoTemplate.findAll(Item.class);
        assertEquals("should be 2 items", 2, items.size());
        assertEquals("should be 2 itemHistory objects", 2, this.mongoTemplate.findAll(ItemHistory.class).size());

        Item item187174 = null;
        for (final Item item : items) {
            if ("item-187-174".equals(item.getIdentifier())) {
                item187174 = item;
            }
            assertNotNull("both gridfsIds should be populated", item.getItemZipGridId());
            assertNotNull("both gridfsIds should be populated", item.getOriginalZipGridId());
            assertFalse("gridfs ids should be different", item.getOriginalZipGridId().equals(item.getItemZipGridId()));
        }

        final GridFSDBFile gridfsFile = this.gridFsRepository.getById(item187174.getItemZipGridId());

        final HashMap<String, Boolean> mappedEntries = new HashMap<String, Boolean>();
        try {
            final InputStream input = gridfsFile.getInputStream();
            final ZipInputStream zis = new ZipInputStream(input);
            ZipEntry ze;
            while ((ze = zis.getNextEntry()) != null) {
                mappedEntries.put(ze.getName(), true);
            }
            zis.close();
            input.close();
        } catch (final IOException e) {
            e.printStackTrace();
            throw new RestException("error parsing zip in unit test....", e);
        }

        assertNull("Item_650 items should not be in zip", mappedEntries.get("multiple_valid_items/Items/Item_650/Item_650_v28_cd_png16malpha.png"));
        assertNull("Item_650 items should not be in zip", mappedEntries.get("multiple_valid_items/Items/Item_650/item-187-650.xml"));
        assertNull("Item_650 items should not be in zip", mappedEntries.get("multiple_valid_items/Items/Item_650/item-187-650_metadata.xml"));

        assertNotNull("Item_174 items should be in zip", mappedEntries.get("multiple_valid_items/Items/Item_174/item-187-174.xml"));
        assertNotNull("Item_174 items should be in zip", mappedEntries.get("multiple_valid_items/Items/Item_174/item-187-174_metadata.xml"));
        assertNotNull("Item_174 items should be in zip", mappedEntries.get("multiple_valid_items/Items/Item_174/Item_174_ASL_STEM.mp4"));
        assertNotNull("imsmanifest should be in zip", mappedEntries.get("multiple_valid_items/Items/Item_174/item_174_enu_nemeth.brf"));
        assertEquals("should be an importset", 1, this.mongoTemplate.findAll(ImportSet.class).size());
    }

    @Test
    public void missingReferenceFile() {
        final ImportSet importSet = getTestImportSet(ImportType.STAGED_FILE, this.missingResourceTestFile.getAbsolutePath());

        assertNull(importSet.getImportCompleteTime());
        this.importSetServiceImpl.importFileSet(importSet);

        final Collection<Item> items = this.mongoTemplate.findAll(Item.class);
        assertEquals("should be 1 items", 0, items.size());
        assertEquals("should be 1 itemHistory objects", 0, this.mongoTemplate.findAll(ItemHistory.class).size());

        final ImportFile firstFile = importSet.getImportFiles().get(0);
        assertEquals("falied status code expected", ImportStatus.FAILED, firstFile.getImportStatus());
        final List<String> allCodes = getAllMessageCodes(firstFile.getMessages());
        assertTrue("expected error code", allCodes.contains("item.invalid.zip.missingResource"));

        assertEquals("should be an importset", 1, this.mongoTemplate.findAll(ImportSet.class).size());
    }

    @Test
    public void invalidZipFile() {
        ImportSet importSet = getTestImportSet(ImportType.STAGED_FILE, this.badZipFile.getAbsolutePath());

        assertNull(importSet.getImportCompleteTime());
        this.importSetServiceImpl.importFileSet(importSet);

        importSet = this.importSetServiceImpl.getImportSet(importSet.getId());

        assertEquals("failed status code expected", ImportStatus.IMPORT_COMPLETE, importSet.getImportStatus());

        final ImportFile firstFile = importSet.getImportFiles().get(0);
        assertEquals("failed status code expected", ImportStatus.FAILED, firstFile.getImportStatus());
        final List<String> allCodes = getAllMessageCodes(firstFile.getMessages());
        assertTrue("expected error code", allCodes.contains("zip.io.error"));

        assertEquals("should be an item", 0, this.mongoTemplate.findAll(Item.class).size());
        assertEquals("should be an importset", 1, this.mongoTemplate.findAll(ImportSet.class).size());
    }

    @Test
    public void missingManifestFile() {
        ImportSet importSet = getTestImportSet(ImportType.STAGED_FILE, this.missingManifestFile.getAbsolutePath());

        assertNull(importSet.getImportCompleteTime());
        this.importSetServiceImpl.importFileSet(importSet);

        importSet = this.importSetServiceImpl.getImportSet(importSet.getId());
        assertEquals("failed status code expected", ImportStatus.IMPORT_COMPLETE, importSet.getImportStatus());

        final ImportFile firstFile = importSet.getImportFiles().get(0);
        assertEquals("failed status code expected", ImportStatus.FAILED, firstFile.getImportStatus());
        final List<String> allCodes = getAllMessageCodes(firstFile.getMessages());
        assertTrue("expected error code", allCodes.contains("apip.zip.extractor.failure.mainfest"));

        assertEquals("should be an item", 0, this.mongoTemplate.findAll(Item.class).size());
        assertEquals("should be an importset", 1, this.mongoTemplate.findAll(ImportSet.class).size());
    }

    @Test
    public void validSftpError() {
        final FileTransferService mockFileTransferService = Mockito.mock(FileTransferService.class);
        Mockito.doThrow(new TestItemBankException("mock io")).when(mockFileTransferService).getFile(Mockito.anyString(), Mockito.anyString());
        this.importSetServiceImpl.setSftpFileTransferService(mockFileTransferService);

        ImportSet importSet = getTestImportSet(ImportType.SFTP, this.testFile.getName());

        assertNull(importSet.getImportCompleteTime());
        this.importSetServiceImpl.importFileSet(importSet);

        importSet = this.importSetServiceImpl.getImportSet(importSet.getId());

        assertEquals("should be one import file", 1, importSet.getImportFiles().size());
        assertEquals("failed status expected", ImportStatus.FAILED, importSet.getImportFiles().get(0).getImportStatus());

        assertEquals("should be an item", 0, this.mongoTemplate.findAll(Item.class).size());
        assertEquals("should be an importset", 1, this.mongoTemplate.findAll(ImportSet.class).size());
    }

    private List<String> getAllMessageCodes(final Map<String, List<TestItemBankMessage>> messages) {
        final List<String> messageCodes = new ArrayList<String>();
        for (final List<TestItemBankMessage> testItemBankMessages : messages.values()) {
            for (final TestItemBankMessage testItemBankMessage : testItemBankMessages) {
                String code = testItemBankMessage.getMessageCode();
                // Add a little hack to add 1st arg to empty field message (just
                // for test verification)
                if ("item.emptyField".equals(code)) {
                    code += "." + testItemBankMessage.getMessageArgs()[0];
                }
                messageCodes.add(code);
            }
        }
        return messageCodes;
    }
}
