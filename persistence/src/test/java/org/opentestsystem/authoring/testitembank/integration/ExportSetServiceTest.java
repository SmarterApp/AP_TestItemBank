/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;

import javax.xml.bind.JAXBException;

import org.apache.commons.io.FileUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.opentestsystem.authoring.testitembank.domain.ExportItem;
import org.opentestsystem.authoring.testitembank.domain.ExportSet;
import org.opentestsystem.authoring.testitembank.domain.ExportStatus;
import org.opentestsystem.authoring.testitembank.domain.Item;
import org.opentestsystem.authoring.testitembank.exception.TestItemBankException;
import org.opentestsystem.authoring.testitembank.persistence.GridFsRepository;
import org.opentestsystem.authoring.testitembank.persistence.ItemRepository;
import org.opentestsystem.authoring.testitembank.service.ExportSetService;
import org.opentestsystem.authoring.testitembank.service.FileTransferService;
import org.opentestsystem.authoring.testitembank.service.impl.ApipZipOutputFileBuilderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;

import com.mongodb.BasicDBObject;
import com.mongodb.gridfs.GridFSFile;

public class ExportSetServiceTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private ItemRepository itemRepository;

    @Autowired
    private ExportSetService exportSetServiceImpl;

    @Autowired
    private ExportSetService mockExportSetServiceImpl;

    @Autowired
    private FileTransferService sftpFileTransferService;

    @Autowired
    private GridFsRepository gridFsRepository;

    private final ApipZipOutputFileBuilderService zipOutputFileBuilderServiceMock = Mockito.mock(ApipZipOutputFileBuilderService.class);

    private String gridFileId = "";

    @Value("classpath:tenant_123/single_valid_apip_item.zip")
    private File testFile;

    @Before
    public void setup() {
        mockExportSetServiceImpl.setSftpFileTransferService(sftpFileTransferService);
        mockExportSetServiceImpl.setZipOutputFileBuilderService(zipOutputFileBuilderServiceMock);

        try {
            final byte[] dummybytes = FileUtils.readFileToByteArray(testFile);
            final GridFSFile file = gridFsRepository.save(dummybytes, "dummyFile.zip", new BasicDBObject());
            gridFileId = file.getId().toString();
        } catch (final IOException e) {
            throw new RuntimeException("could not save test file", e);
        }
    }

    private ExportSet getTestExportSet() {
        final Item item = new Item();
        item.setIdentifier("Apip1");
        item.setVersion("2.2");
        item.setIntendedGrade("A");
        item.setItemZipGridId(gridFileId);
        item.setTenantId("tenant1");

        final Item item2 = new Item();
        item2.setIdentifier("Apip3");
        item2.setVersion("2.4");
        item2.setIntendedGrade("B");
        item2.setItemZipGridId(gridFileId);
        item2.setTenantId("tenant1");

        itemRepository.addItem(item);
        itemRepository.addItem(item2);

        final ExportItem exportMe1 = new ExportItem();
        exportMe1.setIdentifier("Apip1");
        exportMe1.setVersion("2.2");

        final ExportItem exportMe2 = new ExportItem();
        exportMe2.setIdentifier("Apip3");
        exportMe2.setVersion("2.4");

        final ExportSet theSet = new ExportSet();
        theSet.setStatus(ExportStatus.WAITING_TO_EXPORT);
        theSet.setTenantId("tenant1");
        theSet.setItems(Arrays.asList(new ExportItem[] { exportMe1, exportMe2 }));
        return theSet;
    }

    @Test
    public void serviceCrud() {
        final ExportSet exportSet = getTestExportSet();
        final ExportSet savedExportSet = exportSetServiceImpl.saveExportSet(exportSet);
        final String exportSetId = savedExportSet.getId();
        assertNotNull("should not return null oject", savedExportSet);
        assertNotNull("should have an id", exportSetId);

        final ExportSet fromDb = exportSetServiceImpl.getExportSet(exportSetId);
        assertEquals("create and read not saving value..", exportSet.getStatus(), fromDb.getStatus());
        assertEquals("Should have the same number of items", exportSet.getItems().size(), fromDb.getItems().size());
    }

    @Test
    public void exportFileSet() {
        final ExportSet exportSet = getTestExportSet();
        final ExportSet savedExportSet = exportSetServiceImpl.saveExportSet(exportSet);

        try {
            Mockito.when(zipOutputFileBuilderServiceMock.createExportFile(Mockito.same(savedExportSet.getId()), Mockito.anyList())).thenReturn(testFile);
            exportSetServiceImpl.exportFileSet(savedExportSet);
        } catch (final IOException | JAXBException e) {
            fail("exception should not have been thrown");
            assertThat(e.getMessage(), is("mock io"));
        }

        assertEquals("status should be complete.", ExportStatus.EXPORT_COMPLETE, savedExportSet.getStatus());
        assertNotNull("complete date was null.", savedExportSet.getExportCompleted());
        assertNotNull("file name should be set", savedExportSet.getZipFileName());

    }

    @Test
    public void exportSetWithNoItems() {
        final ExportSet exportSet = getTestExportSet();
        exportSet.setItems(null);
        final ExportSet savedExportSet = exportSetServiceImpl.saveExportSet(exportSet);
        exportSetServiceImpl.exportFileSet(savedExportSet);

        assertEquals("status should be complete.", ExportStatus.EXPORT_COMPLETE, savedExportSet.getStatus());
        assertNotNull("complete date was null.", savedExportSet.getExportCompleted());
    }

    @Test
    public void exportSetWithInvalidItemsorVersion() {
        final ExportSet exportSet = getTestExportSet();

        final ExportItem exportMe1 = new ExportItem();
        exportMe1.setIdentifier("Apip9er");
        exportMe1.setVersion("2.2");

        exportSet.setItems(Arrays.asList(new ExportItem[] { exportMe1 }));

        final ExportSet savedExportSet = exportSetServiceImpl.saveExportSet(exportSet);

        exportSetServiceImpl.exportFileSet(savedExportSet);

        assertEquals("status should be failed.", ExportStatus.FAILED, savedExportSet.getStatus());
        assertNotNull("complete date was null.", savedExportSet.getExportCompleted());
    }

    @Test
    public void testSftpCheckedException() {
        final ExportSet exportSet = getTestExportSet();
        final ExportSet savedExportSet = exportSetServiceImpl.saveExportSet(exportSet);

        try {
            Mockito.when(zipOutputFileBuilderServiceMock.createExportFile(Mockito.same(savedExportSet.getId()), Mockito.anyList())).thenThrow(new IOException("mock io"));
            exportSetServiceImpl.exportFileSet(savedExportSet);
        } catch (final IOException | JAXBException e) {
            fail("exception should have been caught");
            assertThat(e.getMessage(), is("mock io"));
        }

        Mockito.reset(zipOutputFileBuilderServiceMock);
        assertEquals("status should be failed.", ExportStatus.FAILED, savedExportSet.getStatus());
        assertNotNull("complete date was null.", savedExportSet.getExportCompleted());
    }

    @Test
    public void testSftpError() {
        final ExportSet exportSet = getTestExportSet();
        final ExportSet savedExportSet = exportSetServiceImpl.saveExportSet(exportSet);

        try {
            Mockito.when(zipOutputFileBuilderServiceMock.createExportFile(Mockito.same(savedExportSet.getId()), Mockito.anyList())).thenThrow(new TestItemBankException("mock io"));
            exportSetServiceImpl.exportFileSet(savedExportSet);
            fail("should have thrown exception");
        } catch (final IOException | JAXBException | TestItemBankException e) {
            assertThat(e.getMessage(), is("mock io"));
        }

        Mockito.reset(zipOutputFileBuilderServiceMock);
        assertEquals("status should be failed.", ExportStatus.FAILED, savedExportSet.getStatus());
        assertNotNull("complete date was null.", savedExportSet.getExportCompleted());
    }
}
