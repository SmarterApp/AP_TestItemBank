/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.integration;

import static org.junit.Assert.assertEquals;

import java.util.List;

import org.junit.Test;
import org.opentestsystem.authoring.testitembank.domain.Item;
import org.opentestsystem.authoring.testitembank.domain.ItemHistory;
import org.opentestsystem.authoring.testitembank.persistence.ItemHistoryRepository;
import org.opentestsystem.authoring.testitembank.persistence.ItemRepository;
import org.springframework.beans.factory.annotation.Autowired;

public class ItemHistoryRepositoryTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private ItemHistoryRepository itemHistoryRepository;

    @Autowired
    private ItemRepository itemRepository;

    @Test
    public void testAddingItemRecordsHistory() {
        final Item item = new Item();
        item.setTenantId("tenant-1");
        item.setIdentifier("apip_1");
        item.setVersion("1.0");
        item.setIntendedGrade("A");

        itemRepository.addItem(item);

        final ItemHistory itemHist = itemHistoryRepository.findByTenantIdAndIdentifierAndVersion("tenant-1", "apip_1", "1.0");
        assertEquals("value not as expected", item.getIdentifier(), itemHist.getIdentifier());
        assertEquals("value not as expected", item.getVersion(), itemHist.getVersion());
        assertEquals("value not as expected", item.getIntendedGrade(), itemHist.getIntendedGrade());

    }

    @Test
    public void testGetItemHisotryById() {
        final Item item = new Item();
        item.setTenantId("tenant-1");
        item.setIdentifier("apip_1");
        item.setVersion("1.0");
        item.setIntendedGrade("A");

        itemRepository.addItem(item);

        final Item item2 = new Item();
        item2.setTenantId("tenant-1");
        item2.setIdentifier("apip_1");
        item2.setVersion("2.0");
        item2.setIntendedGrade("A");

        itemRepository.addItem(item2);

        final Item otherItem = new Item();
        otherItem.setTenantId("tenant-1");
        otherItem.setIdentifier("apip_2F");
        otherItem.setVersion("1.0");
        otherItem.setIntendedGrade("A");

        itemRepository.addItem(otherItem);

        final List<ItemHistory> itemHist = itemHistoryRepository.findByTenantIdAndIdentifier("tenant-1", "apip_1");
        assertEquals("should be two hisory items", 2, itemHist.size());
    }

}
