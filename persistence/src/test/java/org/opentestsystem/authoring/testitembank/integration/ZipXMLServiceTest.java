/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.json.JSONArray;
import org.junit.Test;
import org.opentestsystem.authoring.testitembank.apipzip.domain.ApipItemMetadata;
import org.opentestsystem.authoring.testitembank.apipzip.domain.ApipManifest;
import org.opentestsystem.authoring.testitembank.apipzip.domain.ApipManifestResource;
import org.opentestsystem.authoring.testitembank.domain.Item;
import org.opentestsystem.authoring.testitembank.service.ZipXMLService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.google.common.collect.ImmutableList;

public class ZipXMLServiceTest extends AbstractPersistenceEmbeddedTest {

    @Value("classpath:metadata/item_metadata.xml")
    private File metadataFile;

    @Value("classpath:metadata/item_metadata_strings.xml")
    private File metadataValues;
    
    @Autowired
    private ZipXMLService zipXMLService;
    
    
    @Test
    public void testSupportForMultiValues() throws JsonParseException, JsonMappingException, IOException {
        final InputStream stream = new FileInputStream(this.metadataFile);
        ApipItemMetadata mn = this.zipXMLService.extractMetadataFromXML(stream);
        
        final Map<String, Object> metadata = mn.getMetadata();

        @SuppressWarnings("unchecked")
        final List<Object> langs = (List<Object>) metadata.get("Language");
        assertEquals("wrong number of objects", 2, langs.size());
        assertTrue("expected value not found", containsValue(langs, "eng"));
        assertTrue("expected value not found", containsValue(langs, "spa"));
        assertFalse("expected value found", containsValue(langs, "barsdsd"));
    }

    @Test
    public void testSupportForNonSmarterApp() throws JsonParseException, JsonMappingException, IOException {
        final InputStream stream = new FileInputStream(this.metadataFile);
        ApipItemMetadata mn = this.zipXMLService.extractMetadataFromXML(stream);
        
        final Map<String, Object> metadata = mn.getMetadata();

        final Object nonSmarterApp2 = metadata.get("nonSmarterApp2");
        assertTrue("wrong number of objects", nonSmarterApp2 instanceof String);
        assertEquals("expected value not found", "value2", nonSmarterApp2);

        final List<Object> nonSmarterApp1 = (List<Object>) metadata.get("nonSmarterApp1");
        assertEquals("wrong number of objects", 2, nonSmarterApp1.size());
        assertTrue("expected value not found", containsValue(nonSmarterApp1, "value1a"));
        assertTrue("expected value not found", containsValue(nonSmarterApp1, "value1b"));
    }

    @Test
    public void testSupportForEnemies() throws JsonParseException, JsonMappingException, IOException {
        final InputStream stream = new FileInputStream(this.metadataFile);
        ApipItemMetadata mn = this.zipXMLService.extractMetadataFromXML(stream);
        final Map<String, Object> metadata = mn.getMetadata();

        final List<Object> enemyList = (List<Object>) metadata.get("EnemyItem");
        assertEquals("wrong number of objects", 2, enemyList.size());
        assertTrue("expected value not found", containsValue(enemyList, "8520"));
        assertTrue("expected value not found", containsValue(enemyList, "123456"));
    }

    @SuppressWarnings("unchecked")
    @Test
    public void testPrimaryStandard() throws JsonParseException, JsonMappingException, IOException {
        InputStream stream = new FileInputStream(metadataFile);
        ApipItemMetadata mn = this.zipXMLService.extractMetadataFromXML(stream);
        final Map<String, Object> metadata = mn.getMetadata();
        
        List<Object> standardPublications = (List<Object>) metadata.get("StandardPublication");
        assertEquals("wrong number of objects", 2, standardPublications.size());
        
        Map<String, Object> firstStandard = (Map<String, Object>) standardPublications.get(0);
        Object firstStandardPublication = firstStandard.get("Publication");
        assertEquals("expected value not found", "SBAC-MA-V1", firstStandardPublication );
        
        Object primaryStandards = firstStandard.get("PrimaryStandard");
        assertEquals("expected value not found", "2|A|H-6|a/s|6.A.3", primaryStandards);
        
        List<Object> secondaryStandards = (List<Object>) firstStandard.get("SecondaryStandard");
        assertEquals("wrong number of objects", 3, secondaryStandards.size());
        assertTrue("expected value not found", containsValue(secondaryStandards, "2|A|H-6|a/s|6.A.4"));
    }

    @Test
    public void testValuesAsStrings() throws JsonParseException, JsonMappingException, IOException {
        final InputStream stream = new FileInputStream(this.metadataValues);
        ApipItemMetadata mn = this.zipXMLService.extractMetadataFromXML(stream);
        final Map<String, Object> metadata = mn.getMetadata();

        @SuppressWarnings("unchecked")
        final List<Object> numberList = (List<Object>) metadata.get("number1");
        for (int i = 0; i < numberList.size(); i++) {
            final String obj = numberList.get(i).toString();
            assertEquals("I want this to be a string", true, obj instanceof String);
        }

        final String singleNumber = metadata.get("singleNumber").toString();
        assertEquals("I want this to be a string", true, singleNumber instanceof String);
    }

    @Test
    public void testConsolidateManifests() {
        final List<ApipManifest> manifests = new ArrayList<ApipManifest>();
        manifests.add(buildManifest("manifest-1", ImmutableList.of("resource-3", "resource-2")));
        manifests.add(buildManifest("manifest-2", ImmutableList.of("resource-4", "resource-1")));
        manifests.add(buildManifest("manifest-3", ImmutableList.of("resource-1", "resource-4")));

        final ApipManifest consolidatedManifest = zipXMLService.consolidateManifests("target-id", manifests);
        assertThat(consolidatedManifest.getIdentifier(), is("target-id"));
        assertThat(consolidatedManifest.getResources().size(), is(4));
        assertThat(consolidatedManifest.getResources().get(0).getIdentifier(), is("resource-1"));
        assertThat(consolidatedManifest.getResources().get(1).getIdentifier(), is("resource-2"));
        assertThat(consolidatedManifest.getResources().get(2).getIdentifier(), is("resource-3"));
        assertThat(consolidatedManifest.getResources().get(3).getIdentifier(), is("resource-4"));
    }

    private static ApipManifest buildManifest(final String identifier, final List<String> resourceIdentifiers) {
        final ApipManifest am = new ApipManifest();
        am.setIdentifier(identifier);
        am.setResources(new ArrayList<ApipManifestResource>());

        for (final String resourceIdentifier : resourceIdentifiers) {
            final ApipManifestResource amr = new ApipManifestResource();
            amr.setIdentifier(resourceIdentifier);
            amr.setResourceType("resource-type");
            am.getResources().add(amr);
        }

        return am;
    }

    private boolean containsValue(final List<Object> metadataValues, final String searchValue) {
        boolean found = false;
        for (int i = 0; i < metadataValues.size(); i++) {
            final Object obj = metadataValues.get(i);
            if (obj.toString().equals(searchValue)) {
                found = true;
            }
        }
        return found;
    }
    
    @Test
    public void testDude() throws JsonParseException, JsonMappingException, IOException {
        final InputStream stream = new FileInputStream(this.metadataFile);
        ApipItemMetadata mn = this.zipXMLService.extractMetadataFromXML(stream);
       
        ApipManifestResource resource = new ApipManifestResource();
        resource.setIdentifier("554");
        
        Item i = zipXMLService.buildItem(resource, mn, "12345", "123456");
        System.out.println("dude...");
        
    }

}
