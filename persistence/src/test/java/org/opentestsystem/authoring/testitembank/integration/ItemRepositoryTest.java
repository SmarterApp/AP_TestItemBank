/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import org.junit.Test;
import org.opentestsystem.authoring.testitembank.domain.Item;
import org.opentestsystem.authoring.testitembank.exception.TestItemBankException;
import org.opentestsystem.authoring.testitembank.persistence.ItemRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.data.mongodb.core.MongoTemplate;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.mongodb.MongoException;

public class ItemRepositoryTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private ItemRepository itemRepository;

    @Autowired
    private MongoTemplate mongoTemplate;

    @Test(expected = DuplicateKeyException.class)
    public void testDuplicateItemInsertFails() {
        final String version = "1.0";
        final String identifier = "111";
        final Item validItem = new Item();
        validItem.setSubject("Foo");
        validItem.setVersion(version);
        validItem.setIdentifier(identifier);
        validItem.setTenantId("myTenant");
        itemRepository.addItem(validItem);
        final MongoException result = mongoTemplate.getDb().getLastError().getException();
        assertNull("first item insert failed", result);
        final Item retreivedItem = itemRepository.findItemByTenantIdAndIdentifier("myTenant", identifier);
        assertEquals("first item identifier Doesn't match", identifier, retreivedItem.getIdentifier());
        assertEquals("first item version Doesn't match", version, retreivedItem.getVersion());

        final Item dupItem = new Item();
        dupItem.setSubject("dup");
        dupItem.setVersion(version);
        dupItem.setIdentifier(identifier);
        dupItem.setTenantId("myTenant");
        itemRepository.addItem(dupItem);
        assertFalse("second item insert succeeded, and should have thrown an exception", true);
    }

    @Test
    public void testLesserItemVersionInsertFails() {
        final String version = "2.1";
        final String identifier = "111";
        final Item validItem = new Item();
        validItem.setSubject("Foo");
        validItem.setVersion(version);
        validItem.setIdentifier(identifier);
        validItem.setTenantId("myTenant");
        itemRepository.addItem(validItem);
        final MongoException result = mongoTemplate.getDb().getLastError().getException();
        assertNull("first item insert failed", result);
        final Item retreivedItem = itemRepository.findItemByTenantIdAndIdentifier("myTenant", identifier);
        assertEquals("first item identifier Doesn't match", identifier, retreivedItem.getIdentifier());
        assertEquals("first item version Doesn't match", version, retreivedItem.getVersion());

        assertFailsOnLesserVersion("myTenant", identifier, "1.0");
        assertFailsOnLesserVersion("myTenant", identifier, "1.99");
        assertFailsOnLesserVersion("myTenant", identifier, "2.0");
        assertFailsOnLesserVersion("myTenant", identifier, "2a.0");
        assertFailsOnLesserVersion("myTenant", identifier, "2.0a");
        // TODO, known issue, when parsing to int 05 turns to 5 & looks greater
        // may have to add regex to validator that will prevent from getting to here.
        // assertFailsOnLesserVersion(identifier, "2.05");
    }

    @Test
    public void findByTenantIdAndIdentifierIn() {
        saveItem("tenant-id", "111");
        saveItem("tenant-id", "222");
        saveItem("tenant-id", "333");
        saveItem("tenant-id-2", "444");
        saveItem("tenant-id-2", "555");

        assertThat(itemRepository.findItemsByTenantIdAndIdentifierIn("invalid-tenant", ImmutableList.of("111")).size(), is(0));
        assertThat(itemRepository.findItemsByTenantIdAndIdentifierIn("tenant-id", ImmutableList.of("111")).size(), is(1));
        assertThat(itemRepository.findItemsByTenantIdAndIdentifierIn("tenant-id", ImmutableList.of("111", "222", "333")).size(), is(3));
        assertThat(itemRepository.findItemsByTenantIdAndIdentifierIn("tenant-id", ImmutableList.of("111", "222", "333", "444")).size(), is(3));
        assertThat(itemRepository.findItemsByTenantIdAndIdentifierIn("tenant-id-2", ImmutableList.of("111", "222", "333", "444")).size(), is(1));
        assertThat(itemRepository.findItemsByTenantIdAndIdentifierIn("tenant-id-2", ImmutableList.of("111", "222", "333")).size(), is(0));
    }

    private void assertFailsOnLesserVersion(final String tenantId, final String identifier, final String version) {
        final Item dupItem = new Item();
        dupItem.setSubject("lesser");
        dupItem.setVersion(version);
        dupItem.setTenantId(tenantId);
        dupItem.setIdentifier(identifier);
        TestItemBankException tibE = null;
        try {
            itemRepository.addItem(dupItem);
        } catch (final TestItemBankException e) {
            tibE = e;
        }
        assertNotNull("No exception Thrown", tibE);
        assertEquals("No exception Thrown", "item.version.lessThanExisting", tibE.getMessageCode());
    }

    private void saveItem(final String tenantId, final String identifier) {
        final Item validItem = new Item();
        validItem.setTenantId(tenantId);
        validItem.setIdentifier(identifier);
        validItem.setSubject("Foo");
        validItem.setVersion("2.1");
        validItem.setAllIncludedMetatdata(ImmutableMap.of("Identifier", (Object) identifier));
        itemRepository.addItem(validItem);
    }
}
