/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.integration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import java.util.Arrays;

import org.joda.time.DateTime;
import org.junit.Test;
import org.opentestsystem.authoring.testitembank.domain.ExportItem;
import org.opentestsystem.authoring.testitembank.domain.ExportSet;
import org.opentestsystem.authoring.testitembank.domain.ExportStatus;
import org.opentestsystem.authoring.testitembank.persistence.ExportSetRepository;
import org.springframework.beans.factory.annotation.Autowired;

public class ExportSetRepositoryTest extends AbstractPersistenceEmbeddedTest {

    @Autowired
    private ExportSetRepository exportSetRepository;

    @Test
    public void testExportSetRepositoryCrud() {
        final ExportSet exportMe = new ExportSet();
        exportMe.setTenantId("tenantId");
        exportMe.setStatus(ExportStatus.WAITING_TO_EXPORT);
        exportMe.setTimeRequested(new DateTime());
        final ExportItem item = new ExportItem();
        item.setVersion("1.0");
        item.setIdentifier("apip1");

        final ExportItem item2 = new ExportItem();
        item2.setVersion("1.0");
        item2.setIdentifier("apip2");

        exportMe.setItems(Arrays.asList(new ExportItem[] { item, item2 }));
        assertNull("id on unsavedItem should be null", exportMe.getId());
        exportSetRepository.save(exportMe);

        final String id = exportMe.getId();
        assertNotNull("id on savedItem should be not be null", id);

        final ExportSet readObj = exportSetRepository.findOne(id);

        assertEquals("hmm these should be the same", ExportStatus.WAITING_TO_EXPORT, readObj.getStatus());

        readObj.setStatus(ExportStatus.EXPORT_COMPLETE);
        readObj.setZipFileName("zippedMe.zip");

        exportSetRepository.save(readObj);

        final ExportSet updatedObject = exportSetRepository.findOne(id);

        assertEquals("value not updated correctly", ExportStatus.EXPORT_COMPLETE, updatedObject.getStatus());
        assertEquals("value not updated correctly", "zippedMe.zip", updatedObject.getZipFileName());

        exportSetRepository.delete(updatedObject);

        assertNull("it should be gone", exportSetRepository.findOne(id));

    }
}
