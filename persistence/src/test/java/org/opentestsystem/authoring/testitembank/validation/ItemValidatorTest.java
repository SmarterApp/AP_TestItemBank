/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.validation;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import org.junit.Test;
import org.opentestsystem.authoring.testitembank.domain.Item;
import org.springframework.validation.BindException;
import org.springframework.validation.Errors;
import org.springframework.validation.ObjectError;

public class ItemValidatorTest {

    private static final String[] REQUIRED_METADATA_FIELDS = new String[] { "InteractionType", "Version", "Subject",  "SecurityStatus", "MinimumGrade", "IntendedGrade", "MaximumGrade"
           , "ItemSpecFormat", "StimulusFormat" };

    /***
     * "Language",
     * , "DepthOfKnowledge", "Status" , "MaximumNumberOfPoints", "ScorePoints"
     * @return
     */
    private Item getValidItem() {
        final Item i = new Item();
        i.setIdentifier("apip_id");
        i.setVersion("1.0");
        i.setTenantId("123");
        i.setIntendedGrade("5");
        i.setInteractionType("GI");
        i.setSubject("Math");
        i.setStatus("OP");

        final Map<String, Object> metadata = new HashMap<String, Object>();
        for (final String s : REQUIRED_METADATA_FIELDS) {
            metadata.put(s, Arrays.asList(new Object[] { "Aval" }));
        }
        i.setAllIncludedMetatdata(metadata);
        return i;
    }

    private void assertHasError(final Errors errors, final String errorCode) {
        boolean found = false;
        for (final ObjectError objectError : errors.getAllErrors()) {
            for (final String code : objectError.getCodes()) {
                if (errorCode.equals(code)) {
                    found = true;
                }
            }
        }
        assertTrue("Expected error code not found." + errorCode, found);
    }

    private void assertDoesNotHaveError(final Errors errors, final String errorCode) {
        boolean found = false;
        for (final ObjectError objectError : errors.getAllErrors()) {
            for (final String code : objectError.getCodes()) {
                if (errorCode.equals(code)) {
                    found = true;
                }
            }
        }
        assertFalse("erroneously found error code " + errorCode, found);
    }

    @Test
    public final void invalidStatus() {
        final ItemValidator itemValidator = new ItemValidator();

        final Item item = getValidItem();
        final Errors errors = new BindException(item, "item");
        assertDoesNotHaveError(errors, "item.status.invalid");
        item.setStatus("not GOOD");

        final Errors errors2 = new BindException(item, "item");
        itemValidator.validate(item, errors2);
        assertDoesNotHaveError(errors2, "item.status.invalid");
    }

    @Test
    public final void invalidVersion() {
        assertValidVersion("1");
        assertValidVersion("1.0");
        assertValidVersion("1.1");
        assertValidVersion("20.20000555");
        assertValidVersion("1.");
        // missing validation will catch the following, only checking validity if present
        assertValidVersion("");
        assertValidVersion("       ");
        assertValidVersion(null);

        assertInvalidVersion("-1");
        assertInvalidVersion("v1");
        assertInvalidVersion("foo");
        assertInvalidVersion("-0.000001");
    }

    private void assertValidVersion(final String versionToSet) {
        final Item item = getValidItem();
        final ItemValidator itemValidator = new ItemValidator();
        final Errors emptyItemErrors = new BindException(item, "item");
        item.setVersion(versionToSet);
        itemValidator.validate(item, emptyItemErrors);
        assertDoesNotHaveError(emptyItemErrors, "item.invalidVersion");
    }

    private void assertInvalidVersion(final String versionToSet) {
        final Item item = getValidItem();
        final ItemValidator itemValidator = new ItemValidator();
        final Errors emptyItemErrors = new BindException(item, "item");
        item.setVersion(versionToSet);
        itemValidator.validate(item, emptyItemErrors);
        assertHasError(emptyItemErrors, "item.invalidVersion");
    }

    @Test
    public final void testRequiredFields() {
        final String[] statusCodes = new String[] { "identifier", "interactionType", "tenantId", "version", "subject" };
        final ItemValidator itemValidator = new ItemValidator();

        final Item item = getValidItem();
        final Errors errors = new BindException(item, "item");
        itemValidator.validate(item, errors);

        final Item emptyItem = new Item();
        final Errors emptyItemErrors = new BindException(emptyItem, "item");
        itemValidator.validate(emptyItem, emptyItemErrors);

        for (final String code : statusCodes) {
            assertDoesNotHaveError(errors, "item.emptyField." + code);
            assertHasError(emptyItemErrors, "item.emptyField." + code);
        }
    }

    @Test
    public final void testRequiredMetaDataFields() {
        final ItemValidator itemValidator = new ItemValidator();

        final Item validItem = getValidItem();
        final Errors noErrors = new BindException(validItem, "item");
        itemValidator.validate(validItem, noErrors);
        assertEquals("should not find errors ", 0, noErrors.getErrorCount());

        for (final String code : REQUIRED_METADATA_FIELDS) {
            final Item item = getValidItem();
            item.getAllIncludedMetatdata().remove(code);
            final Errors errors = new BindException(item, "item");
            itemValidator.validate(item, errors);
            assertEquals("should find errors when missing " + code, 1, errors.getErrorCount());
            assertHasError(errors, "item.requiredMetadata.missing");
        }
    }

}
