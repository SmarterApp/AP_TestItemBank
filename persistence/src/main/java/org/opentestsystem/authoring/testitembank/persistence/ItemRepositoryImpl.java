/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.persistence;

import java.util.List;

import org.opentestsystem.authoring.testitembank.domain.Item;
import org.opentestsystem.authoring.testitembank.domain.ItemHistory;
import org.opentestsystem.authoring.testitembank.exception.TestItemBankException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;

/**
 * Implementation of the CustomTestItemBankRepositoryExtensions methods. Spring
 * Data MongoDB uses naming convention to recognize that this impl class needs
 * to be weaved together with a generated TestItemBankRepository impl to create
 * a complete impl of the repository interface.
 */
public class ItemRepositoryImpl implements ItemRepositoryCustom {

    @Autowired
    private MongoTemplate mongoTemplate;

    @Override
    public void addItem(final Item item) {
        final Query query = new Query();
        query.addCriteria(Criteria.where("tenantId").is(item.getTenantId()));
        query.addCriteria(Criteria.where("identifier").is(item.getIdentifier()));

        final Item existingItem = mongoTemplate.findOne(query, Item.class);
        if (existingItem != null) {
            item.setId(existingItem.getId());
            if (item.compareByVersion(existingItem) < 0) {
                throw new TestItemBankException("item.version.lessThanExisting", new String[] { item.getIdentifier(), item.getVersion(), existingItem.getVersion() });
            }
        }

        mongoTemplate.insert(new ItemHistory(item));
        mongoTemplate.save(item);
    }

    @Override
    public List<Item> findItemsByTenantIdAndIdentifierIn(final String tenantId, final List<String> identifierList) {
        final Query query = new Query();
        query.addCriteria(Criteria.where("tenantId").is(tenantId));
        query.addCriteria(Criteria.where("allIncludedMetatdata.Identifier").in(identifierList));
        return this.mongoTemplate.find(query, Item.class);
    }
}
