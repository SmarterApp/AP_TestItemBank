/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.integration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.util.HashMap;
import java.util.List;

import org.junit.Test;
import org.opentestsystem.authoring.testitembank.domain.ItemHistory;

public class ItemHistoryRestTest extends AbstractRestEmbeddedMongoTest {

    @Test
    public final void testHistory() {
        createItem("apip1", "1.0");
        createItem("apip1", "2.0");
        createItem("apip1", "3.0");
        createItem("apip2", "4.0");

        final ItemHistory[] historyList = callGETRestService("/item/apip1/history?tenantId=inTenant", ItemHistory[].class);
        assertNotNull("should not get a null object here", historyList);
        assertEquals("expected 3 items", 3, historyList.length);

        final HashMap<String, ItemHistory> mappedByVersion = new HashMap<String, ItemHistory>();
        for (final ItemHistory hist : historyList) {
            mappedByVersion.put(hist.getVersion(), hist);
        }
        assertEquals("should be 3 items in map:", 3, mappedByVersion.size());
        assertEquals("wrong apipId", "apip1", mappedByVersion.get("1.0").getIdentifier());
        assertEquals("wrong apipId", "apip1", mappedByVersion.get("2.0").getIdentifier());
        assertEquals("wrong apipId", "apip1", mappedByVersion.get("3.0").getIdentifier());
    }

    @Test
    public final void testHistoryGetHistoryById() {
        createItem("apip1", "1.0");

        final List<ItemHistory> hist = mongoTemplate.findAll(ItemHistory.class);

        assertEquals("expected 1 items", 1, hist.size());
        final ItemHistory itemHist = hist.get(0);

        final ItemHistory itemFromRestCall = callGETRestService("/itemHistory/" + itemHist.getId(), ItemHistory.class);
        assertNotNull("item history not found", itemFromRestCall);

        assertEquals("item history id not correct", itemHist.getId(), itemFromRestCall.getId());
        assertEquals("item history getIdentifier not correct", itemHist.getIdentifier(), itemFromRestCall.getIdentifier());
        assertEquals("item history getVersion not correct", itemHist.getVersion(), itemFromRestCall.getVersion());
        assertEquals("item history getSubject not correct", itemHist.getSubject(), itemFromRestCall.getSubject());
        assertEquals("item history getGrade not correct", itemHist.getIntendedGrade(), itemFromRestCall.getIntendedGrade());
    }

}
