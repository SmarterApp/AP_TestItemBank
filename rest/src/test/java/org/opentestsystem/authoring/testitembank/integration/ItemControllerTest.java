/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.commons.lang.StringUtils;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.opentestsystem.authoring.testitembank.domain.Item;
import org.opentestsystem.authoring.testitembank.service.ItemMetadataService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MvcResult;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;

public class ItemControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final Logger LOGGER = LoggerFactory.getLogger(ItemControllerTest.class);

    private static final String DEFAULT_TENANT = "myTenant";

    private static final String ITEM_TYPE = "InteractionType";
    private static final String GRADE = "IntendedGrade";
    private static final String PRIMARY_STANDARD = "PrimaryStandard";
    private static final String PUBLICATION_KEY = "Publication";
    private static final String STIMULUS_NAME = "StimulusName";
    private static final String ASSOCIATED_STIMULUS = "AssociatedStimulus";

    private static final String PAGE_SIZE = "pageSize";
    private static final String CURRENT_PAGE = "currentPage";

    private static final int DEFAULT_PAGE_SIZE = 10;
    private static final int DEFAULT_CURRENT_PAGE = 0;

    @Value("classpath:single_valid_item.zip")
    private File testFile;

    private static final int NUMBER_OF_ITEMS_IN_FILE = 1;

    private List<Item> items;
    private AtomicInteger idIndex;

    @Autowired
    private ItemMetadataService itemMetadataService;

    @Before
    public final void populateItemList() throws Exception {
        final String testFilePath = this.testFile.getAbsolutePath();
        final Map<String, Object> params = new HashMap<String, Object>();
        params.put("pathName", testFilePath);
        this.mockMvc.perform(post("/stagedFile?tenantId=myTenant").accept(MediaType.ALL).contentType(MediaType.APPLICATION_JSON).content(getJsonContent(params))).andExpect(status().isCreated());
        this.items = this.mongoTemplate.findAll(Item.class);
        assertThat(this.items.size(), is(equalTo(NUMBER_OF_ITEMS_IN_FILE)));
        assertThat(this.items.get(0).getTenantId(), is("myTenant"));
        this.idIndex = new AtomicInteger(0);

        this.itemMetadataService.saveNewItemMetadata(DEFAULT_TENANT, GRADE, "valueAAA");
        this.itemMetadataService.saveNewItemMetadata(DEFAULT_TENANT, PUBLICATION_KEY, "valueBBB");
        this.itemMetadataService.saveNewItemMetadata(DEFAULT_TENANT, STIMULUS_NAME, "valueCCC");
        this.itemMetadataService.saveNewItemMetadata(DEFAULT_TENANT, ASSOCIATED_STIMULUS, "valueCCC");
    }

    @Test
    public void badItemGet() throws Exception {
        final Item fetchedItem = callGETRestService("/item/" + "badId?tenantId=invalid-tenant", Item.class, status().isNotFound());
        assertThat(fetchedItem, is(nullValue()));
    }

    @Test
    public void checkItemList() throws Exception {
        for (final Item item : this.items) {
            final Item fetchedItem = callGETRestService("/item/" + item.getIdentifier() + "?tenantId=myTenant", Item.class);
            assertThat(fetchedItem, is(notNullValue()));
        }
    }

    // TODO: Should we return all Items (paginated) if no search criteria is passed in? If not, should there be a special "all" param?
    @Test
    public void testSearchWithNoSearchCriteria() throws Exception {
        saveItems(createItems(50));
        // MvcResult mockMvcResult = mockMvc.perform(get("/item").accept(MediaType.APPLICATION_JSON)).andExpect(status().isBadRequest()).andReturn();
        final MvcResult mockMvcResult = this.mockMvc.perform(get("/item").accept(MediaType.APPLICATION_JSON)).andExpect(status().isBadRequest()).andReturn();
        final String response = mockMvcResult.getResponse().getContentAsString();
        // assertTrue("Response was missing error message " + response, response.contains("The criteria requested is invalid, please refer to the API for more information."));
        assertThat(response.length() > 0, is(equalTo(true)));
    }

    @Test
    public void testSearchWithBadSearchCriteria() throws Exception {
        final String searchParam = "badSearch"; // invalid search key
        final String[] irrelevantValueArr = { "foo" };
        LOGGER.debug("searchParam: " + searchParam + "=" + StringUtils.join(irrelevantValueArr, ","));
        // Ensure no results from bad search...
        // MvcResult mockMvcResult = mockMvc.perform(get("/item").param(searchParam, irrelevantValueArr).accept(MediaType.APPLICATION_JSON)).andExpect(status().isBadRequest()).andReturn();
        final MvcResult mockMvcResult = this.mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, irrelevantValueArr).accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk()).andReturn();
        final String response = mockMvcResult.getResponse().getContentAsString();
        // assertTrue("Response was missing error message " + response, response.contains("The criteria requested is invalid, please refer to the API for more information."));
        assertThat(response.length() > 0, is(equalTo(true)));
    }

    @Test
    public void testSearchWithNoResult() throws Exception {
        final String searchParam = GRADE;
        final String[] nonExistentValue = { "foo" }; // no Item shold match this
        LOGGER.debug("searchParam: " + searchParam + "=" + StringUtils.join(nonExistentValue, ","));
        // SearchResponse<Item> searchResponse = callGETRestService("/item", SearchResponse.class);

        final MvcResult mvcResult = this.mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, nonExistentValue)
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andReturn();
        final SearchResponse<Item> searchResponse = this.objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
        });

        assertThat(searchResponse, is(notNullValue()));
        LOGGER.debug("response: " + searchResponse);
        assertThat(searchResponse.getSearchResults().size(), is(equalTo(0)));
    }

    @Test
    public void testSearchByGrade() throws Exception {
        final String searchParam = GRADE;
        final String[] values = { "first", "second" };
        this.items = createItems(3);
        this.items.get(0).setIntendedGrade(values[0]);
        this.items.get(0).getAllIncludedMetatdata().put(GRADE, values[0]);

        this.items.get(1).setIntendedGrade(values[1]);
        this.items.get(1).getAllIncludedMetatdata().put(GRADE, values[1]);

        this.items.get(2).setIntendedGrade(values[0]);
        this.items.get(2).getAllIncludedMetatdata().put(GRADE, values[0]);
        saveItems(this.items);

        final MvcResult mvcResult = this.mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, values[0]).accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andReturn();
        final SearchResponse<Item> searchResponse = this.objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
        });

        assertThat(searchResponse, is(notNullValue()));
        LOGGER.debug("response: " + searchResponse);
        assertThat(searchResponse.getSearchResults().size(), is(equalTo(2)));
        assertThat(values[0], is(equalTo(searchResponse.getSearchResults().get(0).getIntendedGrade())));
        assertThat(values[0], is(equalTo(searchResponse.getSearchResults().get(1).getIntendedGrade())));
    }

    // TODO
    // @Test
    // public void testSearchByPrimaryStandard() throws Exception {
    // final String searchParam = PRIMARY_STANDARD;
    // final String prefix = "1-IT";
    // final String[] values = { prefix + "|10-KG", prefix + "|11-10" };
    // items = createItems(4);
    // items.get(0).setPrimaryStandard(Arrays.asList(new String[] {values[0]}));
    // items.get(1).setPrimaryStandard(Arrays.asList(new String[] {values[1]}));
    // items.get(2).setPrimaryStandard(Arrays.asList(new String[] {values[0]}));
    // saveItems(items);
    //
    // // non existent value
    // MvcResult mvcResult = mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, "foo").param("sortKey", "identifier").accept(MediaType.APPLICATION_JSON))
    // .andExpect(status().isOk()).andReturn();
    // SearchResponse<Item> searchResponse = objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
    // });
    // assertNotNull("SearchResponse was null!", searchResponse);
    // LOGGER.debug("response: " + searchResponse);
    // assertEquals("We didn't get expected results!", 0, searchResponse.getSearchResults().size());
    //
    // // first value (two items)
    // mvcResult = mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, values[0]).param("sortKey", "identifier").accept(MediaType.APPLICATION_JSON))
    // .andExpect(status().isOk()).andReturn();
    // searchResponse = objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
    // });
    // assertNotNull("SearchResponse was null!", searchResponse);
    // LOGGER.debug("response: " + searchResponse);
    // assertEquals("We didn't get expected results!", 2, searchResponse.getSearchResults().size());
    // assertEquals("The returned Item[0] didn't match our criteria", searchResponse.getSearchResults().get(0).getPrimaryStandard(), values[0]);
    // assertEquals("The returned Item[1] didn't match our criteria", searchResponse.getSearchResults().get(1).getPrimaryStandard(), values[0]);
    //
    // // second value (one items)
    // mvcResult = mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, values[1]).param("sortKey", "identifier").accept(MediaType.APPLICATION_JSON))
    // .andExpect(status().isOk()).andReturn();
    // searchResponse = objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
    // });
    // assertNotNull("SearchResponse was null!", searchResponse);
    // LOGGER.debug("response: " + searchResponse);
    // assertEquals("We didn't get expected results!", 1, searchResponse.getSearchResults().size());
    // assertEquals("The returned Item[0] didn't match our criteria", searchResponse.getSearchResults().get(0).getPrimaryStandard(), values[1]);
    //
    // // like search--prefix (three items)
    // mvcResult = mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, prefix).param("sortKey", "identifier").accept(MediaType.APPLICATION_JSON))
    // .andExpect(status().isOk()).andReturn();
    // searchResponse = objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
    // });
    // assertNotNull("SearchResponse was null!", searchResponse);
    // LOGGER.debug("response: " + searchResponse);
    // assertEquals("We didn't get expected results!", 3, searchResponse.getSearchResults().size());
    // assertEquals("The returned Item[0] didn't match our criteria", searchResponse.getSearchResults().get(0).getPrimaryStandard(), values[0]);
    // assertEquals("The returned Item[0] didn't match our criteria", searchResponse.getSearchResults().get(1).getPrimaryStandard(), values[1]);
    // assertEquals("The returned Item[0] didn't match our criteria", searchResponse.getSearchResults().get(2).getPrimaryStandard(), values[0]);
    //
    // }
    // TODO
    // @Test
    // public void testSearchByPublicationKey() throws Exception {
    // final String searchParam = PUBLICATION_KEY;
    // final String[] values = { "CC-ELA-v1", "CC-MA-v1" };
    // items = createItems(3);
    // items.get(0).setPublicationKey(Arrays.asList(new String[] {values[0]}));
    // items.get(1).setPublicationKey(Arrays.asList(new String[] {values[1]}));
    // items.get(2).setPublicationKey(Arrays.asList(new String[] {values[0]}));
    // saveItems(items);
    //
    // // non existent value
    // MvcResult mvcResult = mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, values[0]).param("sortKey", "identifier").accept(MediaType.APPLICATION_JSON))
    // .andExpect(status().isOk()).andReturn();
    // SearchResponse<Item> searchResponse = objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
    // });
    // assertNotNull("SearchResponse was null!", searchResponse);
    // LOGGER.debug("response: " + searchResponse);
    // assertEquals("We didn't get expected results!", 2, searchResponse.getSearchResults().size());
    //
    // // first value (two items)
    // mvcResult = mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, values[0]).param("sortKey", "identifier").accept(MediaType.APPLICATION_JSON))
    // .andExpect(status().isOk()).andReturn();
    // searchResponse = objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
    // });
    // assertNotNull("SearchResponse was null!", searchResponse);
    // LOGGER.debug("response: " + searchResponse);
    // assertEquals("We didn't get expected results!", 2, searchResponse.getSearchResults().size());
    // assertEquals("The returned Item[0] didn't match our criteria", searchResponse.getSearchResults().get(0).getPublicationKey(), values[0]);
    // assertEquals("The returned Item[1] didn't match our criteria", searchResponse.getSearchResults().get(1).getPublicationKey(), values[0]);
    //
    // // second value (one items)
    // mvcResult = mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, values[1]).param("sortKey", "identifier").accept(MediaType.APPLICATION_JSON))
    // .andExpect(status().isOk()).andReturn();
    // searchResponse = objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
    // });
    // assertNotNull("SearchResponse was null!", searchResponse);
    // LOGGER.debug("response: " + searchResponse);
    // assertEquals("We didn't get expected results!", 1, searchResponse.getSearchResults().size());
    // assertEquals("The returned Item[0] didn't match our criteria", searchResponse.getSearchResults().get(0).getPublicationKey(), values[1]);
    //
    // }

    @Test
    public void testSearchByStimulusName() throws Exception {
        final String searchParam = STIMULUS_NAME;
        final String[] values = { "group1", "group2" };
        this.items = createItems(3);
        this.items.get(0).setStimulusName(values[0]);
        this.items.get(0).getAllIncludedMetatdata().put(STIMULUS_NAME, values[0]);

        this.items.get(1).setStimulusName(values[1]);
        this.items.get(1).getAllIncludedMetatdata().put(STIMULUS_NAME, values[1]);
        this.items.get(2).setStimulusName(values[0]);
        this.items.get(2).getAllIncludedMetatdata().put(STIMULUS_NAME, values[0]);
        saveItems(this.items);

        // non existent value
        MvcResult mvcResult = this.mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, values[0]).accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andReturn();
        SearchResponse<Item> searchResponse = this.objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
        });
        assertThat(searchResponse, is(notNullValue()));
        LOGGER.debug("response: " + searchResponse);
        assertThat(searchResponse.getSearchResults().size(), is(equalTo(2)));

        // first value (two items)
        mvcResult = this.mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, values[0]).accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andReturn();
        searchResponse = this.objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
        });
        assertThat(searchResponse, is(notNullValue()));
        LOGGER.debug("response: " + searchResponse);
        assertThat(searchResponse.getSearchResults().size(), is(equalTo(2)));
        assertThat(values[0], is(equalTo(searchResponse.getSearchResults().get(0).getStimulusName())));
        assertThat(values[0], is(equalTo(searchResponse.getSearchResults().get(1).getStimulusName())));

        // second value (one items)
        mvcResult = this.mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, values[1]).accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andReturn();
        searchResponse = this.objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
        });
        assertThat(searchResponse, is(notNullValue()));
        LOGGER.debug("response: " + searchResponse);
        assertThat(searchResponse.getSearchResults().size(), is(equalTo(1)));
        assertThat(values[1], is(equalTo(searchResponse.getSearchResults().get(0).getStimulusName())));
    }

    @Test
    public void testSearchByAssociatedStimulus() throws Exception {
        final String searchParam = ASSOCIATED_STIMULUS;
        final String[] values = { "ser67se67se890", "gr89serhwser" };
        this.items = createItems(3);
        this.items.get(0).setAssociatedStimulus(values[0]);
        this.items.get(1).setAssociatedStimulus(values[1]);
        this.items.get(2).setAssociatedStimulus(values[0]);

        this.items.get(0).getAllIncludedMetatdata().put(ASSOCIATED_STIMULUS, values[0]);
        this.items.get(1).getAllIncludedMetatdata().put(ASSOCIATED_STIMULUS, values[1]);
        this.items.get(2).getAllIncludedMetatdata().put(ASSOCIATED_STIMULUS, values[0]);
        saveItems(this.items);

        // non existent value
        MvcResult mvcResult = this.mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, values[0]).accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andReturn();
        SearchResponse<Item> searchResponse = this.objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
        });
        assertThat(searchResponse, is(notNullValue()));
        LOGGER.debug("response: " + searchResponse);
        assertThat(searchResponse.getSearchResults().size(), is(equalTo(2)));

        // first value (two items)
        mvcResult = this.mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, values[0]).accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andReturn();
        searchResponse = this.objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
        });
        assertThat(searchResponse, is(notNullValue()));
        LOGGER.debug("response: " + searchResponse);
        assertThat(searchResponse.getSearchResults().size(), is(equalTo(2)));
        assertThat(values[0], is(equalTo(searchResponse.getSearchResults().get(0).getAssociatedStimulus())));
        assertThat(values[0], is(equalTo(searchResponse.getSearchResults().get(1).getAssociatedStimulus())));

        // second value (one items)
        mvcResult = this.mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, values[1]).accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andReturn();
        searchResponse = this.objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
        });
        assertThat(searchResponse, is(notNullValue()));
        LOGGER.debug("response: " + searchResponse);
        assertThat(searchResponse.getSearchResults().size(), is(equalTo(1)));
        assertThat(values[1], is(equalTo(searchResponse.getSearchResults().get(0).getAssociatedStimulus())));

    }

    @Test
    public void testSearchByItemType() throws Exception {
        final String searchParam = ITEM_TYPE;
        final String[] values = { "type1", "type2" };
        this.items = createItems(3);
        this.items.get(0).setInteractionType(values[0]);
        this.items.get(0).getAllIncludedMetatdata().put(ITEM_TYPE, values[0]);
        this.items.get(1).setInteractionType(values[1]);
        this.items.get(1).getAllIncludedMetatdata().put(ITEM_TYPE, values[1]);
        this.items.get(2).setInteractionType(values[0]);
        this.items.get(2).getAllIncludedMetatdata().put(ITEM_TYPE, values[0]);
        saveItems(this.items);
        final MvcResult mvcResult = this.mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, values[0]).accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andReturn();

        final SearchResponse<Item> searchResponse = this.objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
        });

        assertThat(searchResponse, is(notNullValue()));
        LOGGER.debug("response: " + searchResponse);
        assertThat(searchResponse.getSearchResults().size(), is(equalTo(2)));
        assertThat(values[0], is(equalTo(searchResponse.getSearchResults().get(0).getInteractionType())));
        assertThat(values[0], is(equalTo(searchResponse.getSearchResults().get(1).getInteractionType())));
    }

    @Test
    public void testSearchByGradeAndItemType() throws Exception {
        final String searchParam1 = GRADE;
        final String searchParam2 = ITEM_TYPE;
        final String[] values1 = { "first", "second" };
        final String[] values2 = { "type1", "type2" };
        this.items = createItems(3);
        this.items.get(0).setIntendedGrade(values1[0]); // match 1st criteria
        this.items.get(0).getAllIncludedMetatdata().put(GRADE, values1[0]);

        this.items.get(1).setIntendedGrade(values1[1]);
        this.items.get(1).getAllIncludedMetatdata().put(GRADE, values1[1]);

        this.items.get(2).setIntendedGrade(values1[0]); // match 1st criteria
        this.items.get(2).getAllIncludedMetatdata().put(GRADE, values1[0]);

        this.items.get(0).setInteractionType(values2[0]); // match 2nd criteria
        this.items.get(0).getAllIncludedMetatdata().put(ITEM_TYPE, values2[0]);

        this.items.get(1).setInteractionType(values2[1]);
        this.items.get(1).getAllIncludedMetatdata().put(ITEM_TYPE, values2[1]);

        this.items.get(2).setInteractionType(values2[1]);
        this.items.get(2).getAllIncludedMetatdata().put(ITEM_TYPE, values2[1]);

        saveItems(this.items);
        final MvcResult mvcResult = this.mockMvc
                .perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam1, values1[0]).param(searchParam2, values2[0]).accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andReturn();

        final SearchResponse<Item> searchResponse = this.objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
        });

        assertThat(searchResponse, is(notNullValue()));
        LOGGER.debug("response: " + searchResponse);
        assertThat(searchResponse.getSearchResults().size(), is(equalTo(1)));
        assertThat(values1[0], is(equalTo(searchResponse.getSearchResults().get(0).getIntendedGrade())));
        assertThat(values2[0], is(equalTo(searchResponse.getSearchResults().get(0).getInteractionType())));
    }

    @Test
    public void testSearchByGradeWithMultipleValues() throws Exception {
        final String searchParam = GRADE;
        final String[] values = { "first", "second", "third" };
        this.items = createItems(3);
        this.items.get(0).setIntendedGrade(values[0]);
        this.items.get(0).getAllIncludedMetatdata().put(GRADE, values[0]);
        this.items.get(1).setIntendedGrade(values[1]);
        this.items.get(1).getAllIncludedMetatdata().put(GRADE, values[1]);
        this.items.get(2).setIntendedGrade(values[2]);
        this.items.get(2).getAllIncludedMetatdata().put(GRADE, values[2]);
        saveItems(this.items);
        final MvcResult mvcResult = this.mockMvc
                .perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, "firs").param(searchParam, values[1]).param("sortKey", "identifier").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk()).andReturn();
        final SearchResponse<Item> searchResponse = this.objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
        });
        assertThat(searchResponse, is(notNullValue()));
        LOGGER.debug("response: " + searchResponse);
        assertThat(searchResponse.getSearchResults().size(), is(equalTo(1))); // only "second" grade item should be found since grade is an 'equals' search
        assertThat(values[1], is(equalTo(searchResponse.getSearchResults().get(0).getIntendedGrade())));
        // assertThat(values[1], is(equalTo(searchResponse.getSearchResults().get(1).getIntendedGrade())));
    }

    @Test
    public void testSearchWithInvalidPageSize() throws Exception {
        final String searchParam = ITEM_TYPE;
        saveItems(createItems(10));
        final MvcResult mvcResult = this.mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, "whoCares").param(PAGE_SIZE, "-20").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk()).andReturn();
        @SuppressWarnings("unchecked")
        final SearchResponse<Item> searchResponse = new ObjectMapper().readValue(mvcResult.getResponse().getContentAsString(), SearchResponse.class);
        assertThat(searchResponse, is(notNullValue()));
        LOGGER.debug("response: " + searchResponse);
        assertThat(searchResponse.getPageSize(), is(equalTo(DEFAULT_PAGE_SIZE)));
    }

    @Test
    public void testSearchWithInvalidCurrentPage() throws Exception {
        final String searchParam = ITEM_TYPE;
        saveItems(createItems(10));
        final MvcResult mvcResult = this.mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, "whoCares").param(CURRENT_PAGE, "-20").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andReturn();
        @SuppressWarnings("unchecked")
        final SearchResponse<Item> searchResponse = new ObjectMapper().readValue(mvcResult.getResponse().getContentAsString(), SearchResponse.class);
        assertThat(searchResponse, is(notNullValue()));
        LOGGER.debug("response: " + searchResponse);
        assertThat(searchResponse.getCurrentPage(), is(equalTo(DEFAULT_CURRENT_PAGE)));
    }

    @Test
    public void testSearchWithLargerPageSizeThanActualItems() throws Exception {
        final int requestedPageSize = 20;
        final String searchParam = GRADE;
        final String searchValue = "first";
        saveItems(createItems(10));
        final Item item = createItem();
        item.setIntendedGrade(searchValue);
        item.getAllIncludedMetatdata().put(GRADE, searchValue);
        saveItem(item);
        final MvcResult mvcResult = this.mockMvc
                .perform(get("/item").param("tenantId", DEFAULT_TENANT).param(searchParam, searchValue).param(PAGE_SIZE, String.valueOf(requestedPageSize)).accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk()).andReturn();
        @SuppressWarnings("unchecked")
        final SearchResponse<Item> searchResponse = new ObjectMapper().readValue(mvcResult.getResponse().getContentAsString(), SearchResponse.class);
        assertThat(searchResponse, is(notNullValue()));
        LOGGER.debug("response: " + searchResponse);
        assertThat(searchResponse.getPageSize(), is(equalTo(requestedPageSize)));
        assertThat(searchResponse.getSearchResults().size(), is(equalTo(1)));
    }

    @Test
    public void testSearchReturnsNullPrevPageOnFirstPage() throws Exception {
        final String searchValue = "first";
        final List<Item> items1 = createItems(DEFAULT_PAGE_SIZE + 1);
        for (final Item item : items1) {
            item.setIntendedGrade(searchValue);
            item.getAllIncludedMetatdata().put("IntendedGrade", searchValue);
        }
        saveItems(items1);
        final MvcResult mvcResult = this.mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(GRADE, searchValue).accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
                .andReturn();
        @SuppressWarnings("unchecked")
        final SearchResponse<Item> searchResponse = new ObjectMapper().readValue(mvcResult.getResponse().getContentAsString(), SearchResponse.class);
        assertThat(searchResponse, is(notNullValue()));
        LOGGER.debug("response: " + searchResponse);
        assertThat(searchResponse.getSearchResults().size(), is(equalTo(DEFAULT_PAGE_SIZE)));
        assertThat(searchResponse.getPrevPageUrl(), is(nullValue()));
    }

    @Test
    public void testSearchReturnsNullNextPageOnLastPage() throws Exception {
        final String searchValue = "first";
        final List<Item> items1 = createItems(DEFAULT_PAGE_SIZE + 1);
        for (final Item item : items1) {
            item.setIntendedGrade(searchValue);
            item.getAllIncludedMetatdata().put("IntendedGrade", searchValue);
        }
        saveItems(items1);
        final MvcResult mvcResult = this.mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param(GRADE, searchValue).param(CURRENT_PAGE, "1").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk()).andReturn();
        @SuppressWarnings("unchecked")
        final SearchResponse<Item> searchResponse = new ObjectMapper().readValue(mvcResult.getResponse().getContentAsString(), SearchResponse.class);
        assertThat(searchResponse, is(notNullValue()));
        LOGGER.debug("response: " + searchResponse);
        assertThat(searchResponse.getSearchResults().size(), is(equalTo(1)));
        assertThat(searchResponse.getNextPageUrl(), is(nullValue()));
    }

    @Test
    public void testPagination() throws Exception {
        List<Item> items1 = this.mongoTemplate.findAll(Item.class);
        assertThat(items1.size(), is(equalTo(1)));
        for (int i = 0; i < 100; i++) {
            final Item item = createItem();
            item.setIntendedGrade("first");
            this.mongoTemplate.save(item);
        }
        items1 = this.mongoTemplate.findAll(Item.class);
        assertThat(items1.size(), is(equalTo(101)));

        MvcResult mvcResult = this.mockMvc.perform(get("/item").param("tenantId", DEFAULT_TENANT).param("grade", "first").param("sortKey", "identifier").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk()).andReturn();
        SearchResponse<Item> searchResponse = this.objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
        });

        assertThat(searchResponse.getSearchResults().size(), is(equalTo(10)));
        assertThat(searchResponse.getCurrentPage(), is(equalTo(0)));

        mvcResult = this.mockMvc
                .perform(get("/item").param("grade", "first").param("tenantId", DEFAULT_TENANT).param("pageSize", "50").param("sortKey", "identifier").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andReturn();
        searchResponse = this.objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
        });
        assertThat(searchResponse.getSearchResults().size(), is(equalTo(50)));

        mvcResult = this.mockMvc
                .perform(
                        get("/item").param("grade", "first").param("tenantId", DEFAULT_TENANT).param("pageSize", "10").param("currentPage", "2").param("sortKey", "identifier")
                                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk()).andReturn();
        searchResponse = this.objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<Item>>() {
        });
        assertThat(searchResponse.getSearchResults().size(), is(equalTo(10)));
        assertThat(searchResponse.getCurrentPage(), is(equalTo(2)));

        // TODO: For now just assume the IDs will be numeric, incremented by one. (but if not, this test code should be modified)
        final int itemIdBefore = Integer.parseInt(searchResponse.getSearchResults().get(0).getIdentifier());
        final int itemIdAfter = Integer.parseInt(searchResponse.getSearchResults().get(1).getIdentifier());
        assertThat(itemIdAfter, is(equalTo(itemIdBefore + 1)));
    }

    @Test
    @Ignore
    public void testRetrieveItemsByIdentifierList() throws Exception {
        final Map<String, Object> params = ImmutableMap.of("tenantId", (Object) DEFAULT_TENANT, "itemIdentifiers", ImmutableList.of(this.items.get(0).getAllIncludedMetatdata().get("Identifier")));

        final String returnedContent = this.mockMvc.perform(post("/itemsByIdentifierSearch").accept(MediaType.ALL).contentType(MediaType.APPLICATION_JSON).content(getJsonContent(params)))
                .andExpect(status().isOk()).andReturn().getResponse().getContentAsString();

        assertThat(returnedContent.contains("\"Identifier\" : \"174\","), is(true));

    }

    // ============================================================================

    private Item createItem() {
        return createItems(1).get(0);
    }

    // creates some randomly populated items with incrementing integer id
    private List<Item> createItems(final int count) {
        final List<Item> items1 = new ArrayList<Item>(count);
        for (int i = 0; i < count; i++) {
            final Item item = factory.manufacturePojo(Item.class);
            item.setIdentifier(String.valueOf(this.idIndex.getAndIncrement()));
            item.setTenantId(DEFAULT_TENANT);

            final HashMap<String, Object> metadata = new HashMap<String, Object>();
            metadata.put("dude", "sweet");
            metadata.put("dude2", "sweet2");
            metadata.put("dude3", "sweet3");
            item.setAllIncludedMetatdata(metadata);

            items1.add(item);
        }
        return items1;
    }

    private void saveItem(final Item inItem) {
        this.mongoTemplate.save(inItem);
    }

    private void saveItems(final List<Item> inItems) {
        for (final Item item : inItems) {
            this.mongoTemplate.save(item);
        }
    }
}
