/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.integration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.fileUpload;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.opentestsystem.authoring.testitembank.apipzip.domain.ResourceTypePrefix;
import org.opentestsystem.authoring.testitembank.domain.ImportSet;
import org.opentestsystem.authoring.testitembank.domain.ImportStatus;
import org.opentestsystem.authoring.testitembank.domain.Item;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.web.servlet.ResultMatcher;

import com.google.common.io.Files;

public class ImportSetControllerTest extends AbstractRestEmbeddedMongoTest {

    @Value("classpath:single_valid_item.zip")
    private File testFile;

    private static final int NUMBER_OF_ITEMS_IN_FILE = 1;

    @Test
    public final void importStagedFile() throws Exception {
        importItems(status().isCreated());
        final List<Item> lst = mongoTemplate.findAll(Item.class);
        assertEquals("should only be one resource of type " + ResourceTypePrefix.apipItem.getFullName() + " in the sample file.", NUMBER_OF_ITEMS_IN_FILE, lst.size());
    }

    @Test
    public final void importUploadFile() throws Exception {
        final MockMultipartFile mmpf = new MockMultipartFile("file", testFile.getName(), null, Files.toByteArray(testFile));
        mockMvc.perform(fileUpload("/uploadFile?tenantId=myTenantId").file(mmpf)).andExpect(status().isCreated());
        final List<Item> lst = mongoTemplate.findAll(Item.class);
        assertEquals("should be one resource of type " + ResourceTypePrefix.apipItem.getFullName() + " in the sample file.", NUMBER_OF_ITEMS_IN_FILE, lst.size());
    }

    @Test
    public final void importSftpFile() throws Exception {
        final String testFilePath = testFile.getName();

        final Map<String, String> importFile1 = new HashMap<String, String>();
        importFile1.put("pathName", testFilePath);

        final Map<String, Object> params = new HashMap<String, Object>();
        params.put("tenantId", "inTenantId");
        params.put("importFiles", new Object[] { importFile1 });

        final ImportSet importSet = callPOSTRestService("/sftpFileImport", params, ImportSet.class);

        assertNotNull("import set should have an id", importSet.getId());
        boolean finished = false;
        ImportSet importSetFromGet = null;
        int counter = 0;
        // due to async nature of SFTP import, let's poll the importSet's stauts until it's !Unimported (with a fallout after 200 attempts)
        while (!finished && counter < 200) {
            importSetFromGet = callGETRestService("/importSet/" + importSet.getId(), ImportSet.class);
            finished = ImportStatus.UNIMPORTED != importSetFromGet.getImportStatus();
            counter++;
        }

        assertNotNull("import set should have an id", importSetFromGet.getId());
        assertEquals("these should really be equal", importSetFromGet.getId(), importSet.getId());

        assertEquals("should be an import file saved..", 1, importSetFromGet.getImportFiles().size());
        assertEquals("wrong file name: ", testFilePath, importSetFromGet.getImportFiles().get(0).getPathName());

        assertEquals("only 1 item", 1, mongoTemplate.findAll(ImportSet.class).size());
    }

    @Test
    public final void importStagedFileTwice() throws Exception {
        importItems(status().isCreated());
        final List<Item> ret = mongoTemplate.findAll(Item.class);
        assertEquals("only 1 item", 1, ret.size());
        // 201, there may
        // be individual items that fail, but as a whole the import completes,
        // while returning individual errors
        importItems(status().isCreated(), "item.already.exists");
        assertEquals("only 1 item", NUMBER_OF_ITEMS_IN_FILE, mongoTemplate.findAll(Item.class).size());
    }

    private void importItems(final ResultMatcher expecteResult) throws Exception {
        importItems(expecteResult, "");
    }

    private void importItems(final ResultMatcher expecteResult, final String content) throws Exception {
        final String testFilePath = testFile.getAbsolutePath();
        final Map<String, Object> params = new HashMap<String, Object>();
        params.put("pathName", testFilePath);
        assertTrue("expectedContent not found",
                mockMvc.perform(post("/stagedFile?tenantId=myTenantId").accept(MediaType.ALL).contentType(MediaType.APPLICATION_JSON).content(getJsonContent(params))).andExpect(expecteResult)
                        .andReturn().getResponse()
                        .getContentAsString().contains(content));
    }

}
