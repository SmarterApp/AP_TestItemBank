/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testitembank.domain.ItemMetadata;
import org.opentestsystem.authoring.testitembank.domain.ItemMetadataValue;
import org.opentestsystem.authoring.testitembank.service.ItemMetadataService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MvcResult;

import com.fasterxml.jackson.core.type.TypeReference;

public class ItemMetadataControllerTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private ItemMetadataService itemMetadataService;

    @Before
    public final void setup() throws Exception {
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "valueAAA");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "valueBBB");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field1", "valueCCC");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field2", "value111");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field2", "value222");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field2", "value333");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field2", "value444");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field2", "value555");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field2", "value666");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field2", "value777");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field2", "value888");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field2", "value999");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field2", "value101010");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field2", "value111111");
        itemMetadataService.saveNewItemMetadata("tenant-id", "field2", "value121212");
        itemMetadataService.saveNewItemMetadata("tenant-id2", "field1", "different-tenant-value");
        itemMetadataService.saveNewItemMetadata("tenant-id2", "field2", "different-tenant-value");
    }

    @Test
    public void getItemMetadataByTenantIdTest() throws Exception {
        final MvcResult mvcResult = mockMvc.perform(get("/itemMetadata").param("tenantId", "tenant-id").accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andReturn();
        final ItemMetadata result = objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<ItemMetadata>() {
        });

        assertThat(result.getTenantId(), is("tenant-id"));
        assertThat(result.getMetadataKeys().size(), is(2));
        assertThat(result.getMetadataKeys().contains("field1"), is(true));
        assertThat(result.getMetadataKeys().contains("field2"), is(true));
    }

    @Test
    public void searchItemMetadataValuesByTenantIdAndMetadataKeyAndSearchValWithWrongFieldName() throws Exception {
        final MvcResult mvcResult = mockMvc.perform(get("/itemMetadataValue")
                .param("tenantId", "tenant-id")
                .param("metadataKey", "field")
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andReturn();
        final SearchResponse<ItemMetadataValue> response = objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<ItemMetadataValue>>() {
        });

        assertThat(response.getReturnCount(), is(0));
    }

    @Test
    public void searchItemMetadataValuesByTenantIdAndMetadataKeyAndSearchValWithDefaultPageableParams() throws Exception {
        final MvcResult mvcResult = mockMvc.perform(get("/itemMetadataValue")
                .param("tenantId", "tenant-id")
                .param("metadataKey", "field2")
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andReturn();
        final SearchResponse<ItemMetadataValue> response = objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<ItemMetadataValue>>() {
        });

        assertThat(response.getReturnCount(), is(10));
        assertThat(response.getSearchResults().get(0).getMetadataValue(), is("value111"));
        assertThat(response.getSearchResults().get(1).getMetadataValue(), is("value222"));
        assertThat(response.getSearchResults().get(2).getMetadataValue(), is("value333"));
        assertThat(response.getSearchResults().get(3).getMetadataValue(), is("value444"));
        assertThat(response.getSearchResults().get(4).getMetadataValue(), is("value555"));
        assertThat(response.getSearchResults().get(9).getMetadataValue(), is("value101010"));
    }

    @Test
    public void searchItemMetadataValuesByTenantIdAndMetadataKeyAndSearchValWithSortParam() throws Exception {
        final MvcResult mvcResult = mockMvc.perform(get("/itemMetadataValue")
                .param("tenantId", "tenant-id")
                .param("metadataKey", "field2")
                .param("sortKey", "metadataValue")
                .param("sortDir", "asc")
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andReturn();
        final SearchResponse<ItemMetadataValue> response = objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<ItemMetadataValue>>() {
        });

        assertThat(response.getReturnCount(), is(10));
        assertThat(response.getSearchResults().get(0).getMetadataValue(), is("value101010"));
        assertThat(response.getSearchResults().get(1).getMetadataValue(), is("value111"));
        assertThat(response.getSearchResults().get(2).getMetadataValue(), is("value111111"));
        assertThat(response.getSearchResults().get(3).getMetadataValue(), is("value121212"));
        assertThat(response.getSearchResults().get(4).getMetadataValue(), is("value222"));
        assertThat(response.getSearchResults().get(9).getMetadataValue(), is("value777"));
    }

    @Test
    public void searchItemMetadataValuesByTenantIdAndMetadataKeyAndSearchValWithCustomPageableParams() throws Exception {
        final MvcResult mvcResult = mockMvc.perform(get("/itemMetadataValue")
                .param("tenantId", "tenant-id")
                .param("metadataKey", "field2")
                .param("currentPage", "2")
                .param("pageSize", "3")
                .accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andReturn();

        final SearchResponse<ItemMetadataValue> response = objectMapper.readValue(mvcResult.getResponse().getContentAsString(), new TypeReference<SearchResponse<ItemMetadataValue>>() {
        });

        assertThat(response.getReturnCount(), is(3));
        assertThat(response.getSearchResults().get(0).getMetadataValue(), is("value777"));
        assertThat(response.getSearchResults().get(1).getMetadataValue(), is("value888"));
        assertThat(response.getSearchResults().get(2).getMetadataValue(), is("value999"));
    }

}
