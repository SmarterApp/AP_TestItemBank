/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.rest;

import static org.apache.commons.lang.CharEncoding.UTF_8;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.authoring.testitembank.domain.IdentifierListPayload;
import org.opentestsystem.authoring.testitembank.domain.Item;
import org.opentestsystem.authoring.testitembank.domain.ItemHistory;
import org.opentestsystem.authoring.testitembank.domain.ItemMetadata;
import org.opentestsystem.authoring.testitembank.domain.ItemSearchRequest;
import org.opentestsystem.authoring.testitembank.service.ItemHistoryService;
import org.opentestsystem.authoring.testitembank.service.ItemMetadataService;
import org.opentestsystem.authoring.testitembank.service.ItemService;
import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class ItemController extends AbstractRestController {

    @Autowired
    private ItemService itemService;

    @Autowired
    private ItemMetadataService itemMetadataService;

    @Autowired
    private ItemHistoryService itemHistoryService;

    @RequestMapping(value = "/item", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @ResponseBody
    @Secured({ "ROLE_Tib Read" })
    public SearchResponse<Item> searchForItems(final HttpServletResponse response, final HttpServletRequest request, @RequestParam(required = true) final String tenantId) {
        final ItemMetadata metaData = this.itemMetadataService.getItemMetadataByTenantId(tenantId);
        final Set<String> searchableFields = metaData == null ? new HashSet<String>() : metaData.getMetadataKeys();
        final ItemSearchRequest searchRequest = new ItemSearchRequest(TestItemBankUtil.decodeParameterMap(request.getParameterMap()), searchableFields);
        SearchResponse<Item> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = this.itemService.search(searchRequest);
        } else {
            throw new RestException("item.search.invalidSearchCriteria");
        }
        return searchResponse;
    }

    // TODO - to allow request bodies we need to use POST
    @RequestMapping(value = "/itemsByIdentifierSearch", method = RequestMethod.POST, produces = { MediaType.APPLICATION_JSON_VALUE })
    @ResponseBody
    @Secured({ "ROLE_Tib Read" })
    public List<Item> retrieveItemsByIdentifierList(@RequestBody @Valid final IdentifierListPayload identifiers) {
        return this.itemService.retrieveItemsByIdentifierList(identifiers);
    }

    @RequestMapping(value = "/item/{encodedIdentifier}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @ResponseBody
    @Secured({ "ROLE_Tib Read" })
    public Item retrieveItemByIdentifier(@PathVariable("encodedIdentifier") final String encodedItemIdentifier, @RequestParam(required = true) final String tenantId, final HttpServletRequest request,
            final HttpServletResponse response) {
        Item retrievedItem;
        try {
            final String itemIdentifier = URLDecoder.decode(encodedItemIdentifier, UTF_8);
            retrievedItem = this.itemService.retrieveItemByTenantIdAndIdentifier(tenantId, itemIdentifier);
            if (null == retrievedItem) {
                response.setStatus(HttpStatus.NOT_FOUND.value());
            }
        } catch (final UnsupportedEncodingException e) {
            throw new RestException("item.identifier.invalid.encoding", e);
        }
        return retrievedItem;
    }

    @RequestMapping(value = "/item/{identifier}/history", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @ResponseBody
    @Secured({ "ROLE_Tib Read" })
    public List<ItemHistory> retrieveItemHistory(@PathVariable("identifier") final String identifier, @RequestParam(required = true) final String tenantId) {
        List<ItemHistory> itemHistory = new ArrayList<ItemHistory>();
        if (!StringUtils.isEmpty(identifier)) {
            itemHistory = this.itemHistoryService.retrieveHistoryByTenantIdAndIdentifier(tenantId, identifier);
        }
        return itemHistory;
    }

    @RequestMapping(value = "/itemHistory/{identifier}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @ResponseBody
    @Secured({ "ROLE_Tib Read" })
    public ItemHistory retrieveItemHistoryById(@PathVariable("identifier") final String identifier) {
        ItemHistory itemHistory = null;
        if (!StringUtils.isEmpty(identifier)) {
            itemHistory = this.itemHistoryService.retrieveItemHistoryById(identifier);
        }
        return itemHistory;
    }

    public void setItemService(final ItemService inItemService) {
        this.itemService = inItemService;
    }

    public void setItemHistoryService(final ItemHistoryService inItemHistoryService) {
        this.itemHistoryService = inItemHistoryService;
    }
}
