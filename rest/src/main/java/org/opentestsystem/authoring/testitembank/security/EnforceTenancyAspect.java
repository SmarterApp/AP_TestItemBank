/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.security;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Aspect
public class EnforceTenancyAspect {

    @Autowired
    private TenantEnforcementService tenantEnforcementService;

    @Pointcut("within(@org.springframework.stereotype.Controller *)")
    public void controllerBean() {

    }

    @Pointcut("execution(* *(..))")
    public void methodPointcut() {

    }

    @AfterReturning(pointcut = "controllerBean() && methodPointcut() && @annotation(method) && @annotation(secured)", returning = "result")
    public void afterMethodInControllerClass(final JoinPoint joinPoint, final Object result, final RequestMapping method, final Secured secured) {
        long start = System.currentTimeMillis();
        if (method.method() != null) {
            for (RequestMethod requestMethod : method.method()) {
                if (RequestMethod.GET.name().equals(requestMethod.name()) && result != null) {
                    if (!tenantEnforcementService.enforceTenancyForObject(result, secured.value())) {
                        throw new AccessDeniedException("You do not have rights to view this object");
                    }
                    break;
                }
            }
        }
        System.out.println("outgoing scan:" + (System.currentTimeMillis() - start));
    }

    @Before(value = "controllerBean() && methodPointcut() && @annotation(method) && @annotation(secured)")
    public void doAccessCheck(final JoinPoint joinPoint, final RequestMapping method, final Secured secured) {
        long start = System.currentTimeMillis();
        if (method.method() != null) {
            for (RequestMethod requestMethod : method.method()) {
                if (RequestMethod.POST.name().equals(requestMethod.name()) || RequestMethod.PUT.name().equals(requestMethod.name()) || RequestMethod.DELETE.name().equals(requestMethod.name())) {
                    if (joinPoint.getArgs() != null) {
                        for (Object arg : joinPoint.getArgs()) {
                            if (!tenantEnforcementService.enforceTenancyForObject(arg, secured.value())) {
                                throw new AccessDeniedException("You do not have rights to modify this object");
                            }
                        }
                    }
                    break;
                }
            }

        }
        System.out.println("incoming scan:" + (System.currentTimeMillis() - start));
    }

}
