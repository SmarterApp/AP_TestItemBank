/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.rest;

import java.io.UnsupportedEncodingException;
import java.lang.reflect.InvocationTargetException;
import java.net.URLDecoder;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.beanutils.BeanUtils;
import org.opentestsystem.shared.exception.LocalizedException;

import com.google.common.base.Function;
import com.google.common.base.Predicates;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

public final class TestItemBankUtil {

    private TestItemBankUtil() {
        // singleton
    }

    // ========================================================================================================================================================================
    // utility

    public static Map<String, String[]> decodeParameterMap(final Map<String, String[]> parameterMap) {
        final Map<String, String[]> decodedParameterMap = Maps.newHashMap();

        for (final Entry<String, String[]> param : parameterMap.entrySet()) {

            if (param != null) {
                final List<String> decodedParamValues = Lists.newArrayList();
                for (final String val : param.getValue()) {
                    try {
                        final String decodedVal = URLDecoder.decode(val, "UTF-8");
                        decodedParamValues.add(decodedVal);
                    } catch (final UnsupportedEncodingException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                }
                decodedParameterMap.put(param.getKey(), Iterables.toArray(decodedParamValues, String.class));
            }
        }

        return decodedParameterMap;
    }

    public static <O extends Object, T extends Object> List<T> nullsafeListTransform(final Iterable<? extends O> iterableToFilter, final Function<O, T> transformerFunction) {
        if (iterableToFilter == null) {
            return Lists.newArrayList();
        }
        return Lists.newArrayList(Iterables.filter(Iterables.transform(iterableToFilter, transformerFunction), Predicates.notNull()));
    }

    public static String[] paramArray(final String... param) {
        return param;
    }

    public static int safeParseInt(final String val) {
        try {
            return Integer.parseInt(val);
        } catch (final NumberFormatException e) {
            return 0;
        }
    }

    public static int safeParseInt(final Integer intVal) {
        return intVal == null ? 0 : intVal;
    }

    @SuppressWarnings("unchecked")
    public static <T extends Object> T safeClone(final T objectToClone) {
        T returnedClone = null;

        try {
            returnedClone = (T) BeanUtils.cloneBean(objectToClone);
        } catch (final IllegalAccessException | InstantiationException | InvocationTargetException | NoSuchMethodException e) {
            throw new LocalizedException("unsuccessful.clone", e);
        }

        return returnedClone;
    }
}