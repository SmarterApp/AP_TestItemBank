/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.rest;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.joda.time.DateTime;
import org.opentestsystem.authoring.testitembank.domain.ExportSet;
import org.opentestsystem.authoring.testitembank.domain.ExportStatus;
import org.opentestsystem.authoring.testitembank.security.TenantEnforcementService;
import org.opentestsystem.authoring.testitembank.service.ExportSetService;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

@Controller
public class ExportSetController extends AbstractRestController {

    /** logger. **/
    // private static final Logger LOGGER = LoggerFactory.getLogger(ExportSetController.class);

    @Autowired
    private TenantEnforcementService tenantEnforcementService;

    @Autowired
    private ExportSetService exportSetService;

    @RequestMapping(value = "/exportSet/{exportSetId}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @ResponseBody
    @Secured({ "ROLE_Tib Read" })
    public ExportSet getExportSet(@PathVariable final String exportSetId) {
        return exportSetService.getExportSet(exportSetId);
    }

    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/exportSet", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @Secured({ "ROLE_Tib Export" })
    public ExportSet requestExport(@RequestBody @Valid final ExportSet exportSet, final HttpServletResponse response) {
        prepareToExport(exportSet);
        exportSetService.saveExportSet(exportSet);
        exportSetService.exportFileSet(exportSet);
        response.setHeader("Location", exportSet.getUrl());
        return exportSet;
    }

    private void prepareToExport(final ExportSet exportSet) {
        exportSet.setStatus(ExportStatus.WAITING_TO_EXPORT);
        exportSet.setTimeRequested(new DateTime());
    }

}
