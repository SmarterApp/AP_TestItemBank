/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.security;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.authoring.testitembank.domain.Tenanted;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.security.domain.SbacUser;
import org.opentestsystem.shared.security.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;


@Service
public class TenantEnforcementServiceImpl implements TenantEnforcementService {

    //private static final Logger LOGGER = LoggerFactory.getLogger(TenantEnforcementServiceImpl.class);

    @Autowired
    private UserService userService;


    @Override
    public boolean enforceTenancyForObject(final Object verifyMe, final String[] permissionsToEnforce) {
        boolean ret = true;
        // scan object(s) for tenantIds
        Set<String> tenantIds = findTenantIds(verifyMe);
        ret = ensureRightsForTenantIds(tenantIds, permissionsToEnforce);
        return ret;
    }

    @SuppressWarnings("unchecked")
    private Set<String> findTenantIds(final Object verifyMe) {
        final Set<String> tenantIds = new HashSet<String>();
        if (verifyMe instanceof String) {
            // bare tenantID
            tenantIds.add((String) verifyMe);
        } else if (verifyMe instanceof Tenanted) {
            // single tenanted object
            tenantIds.add(((Tenanted) verifyMe).getTenantId());
        } else if (verifyMe instanceof SearchResponse<?>) {
            List<?> results = ((SearchResponse<?>) verifyMe).getSearchResults();
            if (!CollectionUtils.isEmpty(results) && results.get(0) instanceof Tenanted) {
                for (Tenanted tenanted : (List<Tenanted>) results) {
                    // search response full of tenanted objects
                    tenantIds.add(tenanted.getTenantId());
                }
            }
        }
        return tenantIds;
    }

   
    private boolean ensureRightsForTenantIds(final Set<String> tenantIds, final String[] permssions) {
        SbacUser user = userService.getCurrentUser();
        boolean validForAllTenants = true;
        if(user == null){
            validForAllTenants = false;
        } else {
            if (tenantIds != null) {
                for (String tenantId : tenantIds) {
                    boolean hasOne = false;
                    if (!StringUtils.isEmpty(tenantId) && permssions != null) {
                        for (String permission : permssions) {
                            hasOne = hasOne || user.hasPermissionForTenant(permission, tenantId);
                        }
                    }
                    validForAllTenants = validForAllTenants && hasOne;
                }
            }
        }
        return validForAllTenants;
    }

    @Override
    public void manuallyVerifyTenantId(String verifyTenantId, String[] requiredPermissions) {
        Set<String> tenantIds = new HashSet<String>();
        tenantIds.add(verifyTenantId);
        boolean valid = ensureRightsForTenantIds(tenantIds, requiredPermissions);
        if(!valid){
            throw new AccessDeniedException("You do not have rights to modify this object");
        }
        
    }
}
